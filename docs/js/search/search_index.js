var COMPODOC_SEARCH_INDEX = {
  index: {
    version: "2.3.9",
    fields: ["title", "body"],
    fieldVectors: [
      ["title/interfaces/ApiOptions.html", [0, 1.868, 1, 2.531]],
      [
        "body/interfaces/ApiOptions.html",
        [
          1, 2.967, 2, 1.589, 3, 0.291, 4, 0.161, 5, 0.101, 6, 1.681, 7, 0.995, 8, 2.692,
          9, 3.114, 10, 2.692, 11, 2.692, 12, 3.114, 13, 2.414, 14, 3.114, 15, 2.692, 16,
          3.114, 17, 2.414, 18, 0.259, 19, 0.949, 20, 1.308, 21, 5.379, 22, 4.612, 23,
          5.063, 24, 5.063, 25, 5.857, 26, 4.824, 27, 4.528, 28, 1.793, 29, 2.562, 30,
          0.016, 31, 3.914, 32, 4.528, 33, 2.31, 34, 4.528, 35, 4.528, 36, 4.528, 37,
          3.51, 38, 0.61, 39, 5.379, 40, 3.114, 41, 6.493, 42, 2.414, 43, 2.414, 44,
          2.692, 45, 3.914, 46, 4.528, 47, 3.51, 48, 3.51, 49, 0.897, 50, 3.114, 51,
          3.114, 52, 2.594, 53, 3.114, 54, 3.114, 55, 3.114, 56, 2.692, 57, 1.903, 58,
          3.114, 59, 3.208, 60, 3.114, 61, 2.967, 62, 2.041, 63, 2.414, 64, 2.692, 65,
          0.009, 66, 0.009,
        ],
      ],
      ["title/modules/AppModule.html", [67, 2.084, 68, 2.736]],
      [
        "body/modules/AppModule.html",
        [
          3, 0.202, 4, 0.223, 5, 0.141, 30, 0.015, 65, 0.012, 66, 0.012, 68, 5.574, 69,
          1.988, 70, 2.613, 71, 3.739, 72, 3.739, 73, 4.42, 74, 4.42, 75, 4.42, 76, 4.42,
          77, 4.42, 78, 4.42, 79, 4.42, 80, 2.901, 81, 2.207, 82, 2.092, 83, 4.325, 84,
          4.325,
        ],
      ],
      ["title/controllers/AuthController.html", [85, 2.359, 86, 2.736]],
      [
        "body/controllers/AuthController.html",
        [
          3, 0.197, 4, 0.218, 5, 0.137, 18, 0.351, 20, 1.027, 30, 0.015, 38, 0.496, 65,
          0.011, 66, 0.011, 86, 2.985, 87, 1.936, 88, 3.641, 89, 1.711, 90, 2.324, 91,
          2.784, 92, 4.829, 93, 4.829, 94, 4.212, 95, 4.107, 96, 1.863, 97, 3.661, 98,
          4.212, 99, 3.36, 100, 3.661, 101, 4.212, 102, 3.661, 103, 4.212, 104, 4.212,
          105, 4.212, 106, 4.212, 107, 1.711, 108, 1.171, 109, 1.64, 110, 3.201, 111,
          4.212, 112, 4.107, 113, 4.212, 114, 2.76, 115, 2.76, 116, 2.76, 117, 2.76, 118,
          4.212,
        ],
      ],
      ["title/classes/AuthDto.html", [95, 2.531, 119, 1.134]],
      [
        "body/classes/AuthDto.html",
        [
          3, 0.213, 4, 0.235, 5, 0.148, 7, 1.877, 18, 0.379, 19, 1.231, 28, 1.799, 30,
          0.015, 38, 0.522, 49, 1.053, 65, 0.012, 66, 0.012, 95, 2.981, 96, 1.959, 120,
          1.393, 121, 3.933, 122, 5.045, 123, 5.045, 124, 4.554, 125, 5.625, 126, 3.933,
          127, 3.512, 128, 3.223, 129, 3.933, 130, 2.981, 131, 3.223, 132, 3.933, 133,
          3.933, 134, 3.933, 135, 3.526, 136, 3.933, 137, 3.933, 138, 2.779,
        ],
      ],
      ["title/modules/AuthModule.html", [67, 2.084, 73, 2.531]],
      [
        "body/modules/AuthModule.html",
        [
          3, 0.219, 4, 0.242, 5, 0.152, 30, 0.015, 65, 0.012, 66, 0.012, 69, 2.151, 70,
          2.75, 73, 5.044, 80, 3.053, 81, 2.389, 82, 2.264, 86, 3.317, 87, 2.151, 139,
          4.047, 140, 4.047, 141, 4.047, 142, 5.004, 143, 4.555, 144, 3.752, 145, 4.681,
          146, 2.86, 147, 3.629,
        ],
      ],
      ["title/interfaces/AuthOptions.html", [0, 1.868, 148, 2.531]],
      [
        "body/interfaces/AuthOptions.html",
        [
          2, 1.923, 3, 0.176, 4, 0.195, 5, 0.123, 6, 2.035, 7, 1.204, 8, 3.258, 15, 3.258,
          18, 0.314, 19, 1.086, 20, 1.326, 28, 1.154, 29, 1.649, 30, 0.015, 37, 2.922, 38,
          0.567, 49, 1.084, 52, 2.97, 57, 2.303, 65, 0.011, 66, 0.011, 128, 2.671, 148,
          3.396, 149, 3.258, 150, 3.769, 151, 5.923, 152, 5.923, 153, 4.738, 154, 5.923,
          155, 5.183, 156, 3.769, 157, 3.258, 158, 3.769, 159, 3.769, 160, 3.258, 161,
          3.258, 162, 5.923, 163, 3.769, 164, 3.769, 165, 3.769, 166, 3.769, 167, 3.769,
          168, 3.769, 169, 1.5, 170, 3.258, 171, 5.183, 172, 3.769, 173, 5.183, 174,
          5.183, 175, 3.769, 176, 3.769, 177, 3.769, 178, 3.769, 179, 3.769, 180, 3.769,
          181, 3.769, 182, 3.769, 183, 3.258, 184, 3.769, 185, 3.769,
        ],
      ],
      ["title/injectables/AuthService.html", [142, 2.531, 186, 1.61]],
      [
        "body/injectables/AuthService.html",
        [
          3, 0.171, 4, 0.189, 5, 0.119, 18, 0.304, 20, 1.216, 30, 0.015, 38, 0.588, 49,
          1.096, 65, 0.01, 66, 0.01, 89, 1.554, 90, 2.192, 91, 2.854, 92, 4.386, 93,
          4.386, 95, 3.325, 107, 2.025, 108, 1.386, 109, 1.848, 110, 3.339, 112, 3.325,
          122, 2.59, 142, 2.395, 144, 3.146, 187, 1.524, 188, 3.16, 189, 2.754, 190,
          5.074, 191, 5.074, 192, 1.39, 193, 3.16, 194, 6.296, 195, 3.607, 196, 3.655,
          197, 3.655, 198, 3.655, 199, 3.655, 200, 3.325, 201, 3.933, 202, 1.68, 203,
          3.655, 204, 5.074, 205, 3.933,
        ],
      ],
      ["title/controllers/AuthorController.html", [85, 2.359, 206, 2.736]],
      [
        "body/controllers/AuthorController.html",
        [
          3, 0.149, 4, 0.165, 5, 0.15, 7, 1.727, 18, 0.493, 20, 1.089, 30, 0.015, 38,
          0.526, 49, 1.002, 65, 0.009, 66, 0.009, 87, 1.464, 89, 1.409, 96, 2.094, 97,
          2.088, 99, 3.501, 100, 4.115, 102, 2.088, 107, 1.813, 108, 1.241, 109, 1.843,
          114, 2.088, 115, 2.088, 116, 2.088, 117, 2.088, 169, 1.832, 202, 3.007, 206,
          2.257, 207, 2.47, 208, 2.227, 209, 2.485, 210, 2.485, 211, 2.754, 212, 3.568,
          213, 3.879, 214, 3.186, 215, 2.754, 216, 2.754, 217, 4.19, 218, 3.186, 219,
          2.257, 220, 4.194, 221, 4.194, 222, 4.194, 223, 3.829, 224, 3.541, 225, 3.541,
          226, 2.257, 227, 2.47, 228, 1.72, 229, 3.568, 230, 2.47, 231, 1.72, 232, 3.879,
          233, 2.47,
        ],
      ],
      ["title/classes/AuthorEntity.html", [119, 1.134, 234, 2.994]],
      [
        "body/classes/AuthorEntity.html",
        [
          3, 0.18, 4, 0.199, 5, 0.126, 18, 0.321, 19, 1.104, 20, 1.185, 28, 1.613, 30,
          0.016, 38, 0.633, 49, 0.986, 65, 0.011, 66, 0.011, 90, 2.524, 96, 2.248, 108,
          1.104, 120, 1.182, 225, 2.529, 234, 2.992, 235, 2.735, 236, 2.083, 237, 2.211,
          238, 3.451, 239, 3.732, 240, 3.732, 241, 2.304, 242, 3.451, 243, 2.735, 244,
          4.564, 245, 3.732, 246, 3.451, 247, 4.248, 248, 3.757, 249, 3.732, 250, 2.992,
          251, 2.529, 252, 2.735, 253, 2.358, 254, 2.529, 255, 2.529, 256, 2.529,
        ],
      ],
      ["title/modules/AuthorModule.html", [67, 2.084, 74, 2.531]],
      [
        "body/modules/AuthorModule.html",
        [
          3, 0.237, 4, 0.262, 5, 0.165, 30, 0.015, 65, 0.013, 66, 0.013, 69, 2.332, 70,
          2.893, 74, 4.982, 80, 3.212, 81, 2.589, 82, 2.454, 87, 2.332, 146, 3.1, 206,
          3.595, 257, 4.386, 258, 4.386, 259, 4.372, 260, 4.69, 261, 5.074,
        ],
      ],
      ["title/injectables/AuthorRepository.html", [186, 1.61, 259, 2.359]],
      [
        "body/injectables/AuthorRepository.html",
        [
          3, 0.132, 4, 0.146, 5, 0.092, 18, 0.235, 19, 0.883, 20, 1.228, 28, 0.864, 29,
          1.235, 30, 0.016, 33, 1.441, 38, 0.606, 49, 0.855, 65, 0.009, 66, 0.009, 89,
          1.29, 90, 2.536, 91, 3.038, 99, 3.032, 107, 2.044, 108, 1.399, 109, 1.906, 169,
          1.677, 187, 1.177, 189, 1.843, 192, 1.074, 208, 2.038, 236, 1.524, 241, 1.843,
          259, 1.725, 262, 2.441, 263, 1.618, 264, 2.76, 265, 2.76, 266, 2.76, 267, 2.76,
          268, 2.76, 269, 2.274, 270, 2.823, 271, 2.76, 272, 2.823, 273, 1.85, 274, 2.76,
          275, 1.85, 276, 3.506, 277, 1.85, 278, 4.374, 279, 3.661, 280, 1.85, 281, 1.85,
          282, 4.107, 283, 3.661, 284, 1.85, 285, 2.76, 286, 1.85, 287, 2.76, 288, 2.76,
          289, 1.85, 290, 1.725, 291, 1.85,
        ],
      ],
      ["title/injectables/AuthorService.html", [186, 1.61, 260, 2.531]],
      [
        "body/injectables/AuthorService.html",
        [
          3, 0.158, 4, 0.174, 5, 0.182, 18, 0.281, 20, 1.227, 30, 0.015, 38, 0.593, 49,
          1.074, 65, 0.01, 66, 0.01, 89, 1.469, 90, 2.52, 91, 3.083, 107, 2.043, 108,
          1.398, 109, 1.958, 110, 3.679, 169, 1.91, 187, 1.407, 189, 2.099, 192, 1.284,
          202, 2.565, 209, 2.589, 210, 2.589, 211, 2.918, 212, 4.712, 213, 3.143, 228,
          1.822, 231, 1.822, 232, 3.983, 259, 3.41, 260, 2.211, 269, 2.589, 276, 1.822,
          292, 2.918, 293, 4.327, 294, 4.797, 295, 3.375, 296, 2.616, 297, 3.375, 298,
          4.797,
        ],
      ],
      ["title/classes/BaseEntitySchema.html", [119, 1.134, 237, 2.213]],
      [
        "body/classes/BaseEntitySchema.html",
        [
          3, 0.256, 4, 0.283, 5, 0.178, 18, 0.456, 19, 1.383, 30, 0.015, 38, 0.487, 65,
          0.014, 66, 0.014, 96, 1.826, 120, 1.677, 237, 3.137, 241, 2.885, 242, 4.322,
          255, 3.588, 256, 3.588, 299, 4.734,
        ],
      ],
      ["title/controllers/BookController.html", [85, 2.359, 300, 2.736]],
      [
        "body/controllers/BookController.html",
        [
          3, 0.147, 4, 0.163, 5, 0.103, 7, 1.717, 18, 0.49, 20, 1.084, 30, 0.015, 38,
          0.598, 49, 1.075, 65, 0.009, 66, 0.009, 87, 1.45, 89, 1.399, 96, 2.085, 97,
          2.067, 99, 3.494, 100, 4.099, 102, 2.067, 107, 1.804, 108, 1.235, 109, 1.836,
          114, 2.067, 115, 2.067, 116, 2.067, 117, 2.067, 169, 1.819, 202, 2.997, 208,
          2.211, 209, 2.467, 210, 2.467, 215, 2.727, 216, 2.727, 217, 4.166, 219, 2.235,
          220, 4.175, 221, 4.175, 222, 4.175, 223, 3.808, 226, 2.235, 227, 2.446, 228,
          1.703, 229, 3.543, 230, 2.446, 231, 1.703, 233, 2.446, 300, 2.235, 301, 2.727,
          302, 2.727, 303, 2.995, 304, 3.861, 305, 3.155, 306, 3.155, 307, 2.235, 308,
          3.08, 309, 3.861,
        ],
      ],
      ["title/classes/BookEntity.html", [119, 1.134, 251, 2.531]],
      [
        "body/classes/BookEntity.html",
        [
          3, 0.139, 4, 0.154, 5, 0.097, 7, 1.401, 18, 0.248, 19, 0.919, 28, 1.342, 30,
          0.016, 33, 2.237, 38, 0.667, 49, 1.038, 52, 3.286, 65, 0.009, 66, 0.009, 96,
          2.431, 108, 0.919, 120, 0.912, 224, 2.873, 225, 1.953, 236, 1.608, 237, 1.707,
          241, 1.918, 242, 2.873, 244, 5.115, 246, 4.005, 247, 4.064, 248, 4.051, 249,
          3.106, 251, 1.953, 252, 3.106, 254, 1.953, 255, 1.953, 256, 1.953, 310, 2.111,
          311, 3.106, 312, 3.79, 313, 3.79, 314, 3.399, 315, 3.79, 316, 3.399, 317, 3.79,
          318, 3.79, 319, 3.79, 320, 3.79, 321, 2.31, 322, 2.31, 323, 4.384, 324, 2.98,
          325, 2.111, 326, 2.111, 327, 2.98,
        ],
      ],
      ["title/modules/BookModule.html", [67, 2.084, 75, 2.531]],
      [
        "body/modules/BookModule.html",
        [
          3, 0.237, 4, 0.262, 5, 0.165, 30, 0.015, 65, 0.013, 66, 0.013, 69, 2.332, 70,
          2.893, 75, 4.982, 80, 3.212, 81, 2.589, 82, 2.454, 87, 2.332, 146, 3.1, 300,
          3.595, 328, 4.386, 329, 4.386, 330, 4.372, 331, 4.69, 332, 5.074,
        ],
      ],
      ["title/injectables/BookRepository.html", [186, 1.61, 330, 2.359]],
      [
        "body/injectables/BookRepository.html",
        [
          3, 0.132, 4, 0.146, 5, 0.092, 18, 0.235, 19, 0.883, 20, 1.228, 28, 0.864, 29,
          1.235, 30, 0.016, 33, 1.441, 38, 0.606, 49, 0.855, 65, 0.009, 66, 0.009, 89,
          1.29, 90, 2.536, 91, 3.038, 99, 3.032, 107, 2.044, 108, 1.399, 109, 1.906, 169,
          1.677, 187, 1.177, 189, 1.843, 192, 1.074, 208, 2.038, 236, 1.524, 241, 1.843,
          263, 1.618, 264, 2.76, 265, 2.76, 266, 2.76, 267, 2.76, 268, 2.76, 269, 2.274,
          271, 2.76, 273, 1.85, 274, 2.76, 275, 1.85, 276, 3.506, 277, 1.85, 278, 4.374,
          279, 3.661, 280, 1.85, 281, 1.85, 282, 4.107, 283, 3.661, 284, 1.85, 285, 2.76,
          286, 1.85, 287, 2.76, 288, 2.76, 289, 1.85, 290, 1.725, 291, 1.85, 330, 1.725,
          333, 2.441, 334, 2.823, 335, 2.823,
        ],
      ],
      ["title/injectables/BookService.html", [186, 1.61, 331, 2.531]],
      [
        "body/injectables/BookService.html",
        [
          3, 0.157, 4, 0.173, 5, 0.109, 18, 0.279, 20, 1.224, 30, 0.015, 38, 0.592, 49,
          1.072, 65, 0.01, 66, 0.01, 89, 1.462, 90, 2.516, 91, 3.079, 107, 2.038, 108,
          1.395, 109, 1.954, 110, 3.814, 169, 1.9, 187, 1.398, 189, 2.088, 192, 1.275,
          202, 2.555, 209, 2.577, 210, 2.577, 228, 1.809, 231, 1.809, 269, 2.577, 293,
          4.31, 296, 2.598, 302, 2.897, 303, 3.97, 304, 3.128, 307, 2.375, 309, 3.97, 330,
          3.397, 331, 2.196, 336, 2.897, 337, 4.774, 338, 3.352, 339, 4.127, 340, 3.352,
          341, 4.774, 342, 3.352,
        ],
      ],
      ["title/controllers/CategoryController.html", [85, 2.359, 343, 2.736]],
      [
        "body/controllers/CategoryController.html",
        [
          3, 0.153, 4, 0.169, 5, 0.106, 7, 1.753, 18, 0.499, 20, 1.102, 30, 0.016, 38,
          0.533, 49, 1.011, 65, 0.01, 66, 0.01, 87, 1.504, 89, 1.437, 96, 2.116, 97,
          2.144, 99, 3.52, 100, 4.158, 102, 2.144, 107, 1.835, 108, 1.256, 109, 1.863,
          114, 2.144, 115, 2.144, 116, 2.144, 117, 2.144, 169, 1.868, 202, 3.035, 208,
          2.27, 209, 2.533, 210, 2.533, 217, 4.253, 219, 2.318, 220, 4.246, 221, 4.246,
          222, 4.246, 223, 3.887, 226, 2.318, 227, 2.537, 228, 1.766, 229, 3.638, 230,
          2.537, 231, 1.766, 233, 2.537, 343, 2.318, 344, 2.537, 345, 3.272, 346, 3.595,
          347, 3.272, 348, 3.272, 349, 3.272, 350, 4.253, 351, 3.927,
        ],
      ],
      ["title/classes/CategoryEntity.html", [119, 1.134, 352, 2.736]],
      [
        "body/classes/CategoryEntity.html",
        [
          3, 0.199, 4, 0.22, 5, 0.138, 7, 1.795, 18, 0.354, 19, 1.178, 28, 1.301, 30,
          0.016, 38, 0.619, 49, 0.86, 65, 0.012, 66, 0.012, 96, 2.233, 108, 1.178, 120,
          1.301, 225, 2.784, 236, 2.294, 237, 2.435, 241, 2.458, 242, 3.682, 243, 3.011,
          244, 4.46, 245, 3.011, 246, 3.682, 247, 3.981, 248, 3.76, 249, 3.981, 250,
          3.294, 252, 3.981, 253, 2.596, 255, 2.784, 256, 2.784, 311, 3.011, 320, 3.673,
          326, 3.011, 352, 3.981, 353, 3.011, 354, 4.858, 355, 3.294,
        ],
      ],
      ["title/modules/CategoryModule.html", [67, 2.084, 76, 2.531]],
      [
        "body/modules/CategoryModule.html",
        [
          3, 0.237, 4, 0.262, 5, 0.165, 30, 0.015, 65, 0.013, 66, 0.013, 69, 2.332, 70,
          2.893, 76, 4.982, 80, 3.212, 81, 2.589, 82, 2.454, 87, 2.332, 146, 3.1, 343,
          3.595, 356, 4.386, 357, 4.386, 358, 4.372, 359, 4.69, 360, 5.074,
        ],
      ],
      ["title/injectables/CategoryRepository.html", [186, 1.61, 358, 2.359]],
      [
        "body/injectables/CategoryRepository.html",
        [
          3, 0.132, 4, 0.146, 5, 0.092, 18, 0.235, 19, 0.883, 20, 1.228, 28, 0.864, 29,
          1.235, 30, 0.016, 33, 1.441, 38, 0.606, 49, 0.855, 65, 0.009, 66, 0.009, 89,
          1.29, 90, 2.536, 91, 3.038, 99, 3.032, 107, 2.044, 108, 1.399, 109, 1.906, 169,
          1.677, 187, 1.177, 189, 1.843, 192, 1.074, 208, 2.038, 236, 1.524, 241, 1.843,
          263, 1.618, 264, 2.76, 265, 2.76, 266, 2.76, 267, 2.76, 268, 2.76, 269, 2.274,
          271, 2.76, 273, 1.85, 274, 2.76, 275, 1.85, 276, 3.506, 277, 1.85, 278, 4.374,
          279, 3.661, 280, 1.85, 281, 1.85, 282, 4.107, 283, 3.661, 284, 1.85, 285, 2.76,
          286, 1.85, 287, 2.76, 288, 2.76, 289, 1.85, 290, 1.725, 291, 1.85, 358, 1.725,
          361, 2.441, 362, 2.823, 363, 2.823,
        ],
      ],
      ["title/injectables/CategoryService.html", [186, 1.61, 359, 2.531]],
      [
        "body/injectables/CategoryService.html",
        [
          3, 0.172, 4, 0.19, 5, 0.12, 18, 0.307, 20, 1.22, 30, 0.015, 38, 0.589, 49,
          1.051, 65, 0.01, 66, 0.01, 89, 1.562, 90, 2.566, 91, 3.073, 107, 2.031, 108,
          1.39, 109, 1.947, 110, 3.8, 169, 2.03, 187, 1.536, 192, 1.401, 202, 2.689, 209,
          2.753, 210, 2.753, 228, 1.988, 231, 1.988, 269, 2.753, 293, 4.536, 296, 2.855,
          346, 3.342, 351, 4.139, 358, 3.575, 359, 2.414, 364, 3.184, 365, 3.683, 366,
          3.683, 367, 3.184,
        ],
      ],
      ["title/modules/ConfigModule.html", [67, 2.084, 77, 2.531]],
      [
        "body/modules/ConfigModule.html",
        [
          3, 0.249, 4, 0.275, 5, 0.173, 30, 0.014, 65, 0.013, 66, 0.013, 69, 2.447, 70,
          2.98, 77, 4.769, 80, 3.309, 81, 2.717, 82, 2.576, 147, 4.128, 195, 4.275, 368,
          4.603, 369, 4.603, 370, 5.325,
        ],
      ],
      ["title/classes/ConfigService.html", [119, 1.134, 195, 2.213]],
      [
        "body/classes/ConfigService.html",
        [
          1, 3.826, 3, 0.211, 4, 0.233, 5, 0.147, 18, 0.375, 19, 1.224, 30, 0.015, 38,
          0.401, 65, 0.012, 66, 0.012, 89, 1.788, 109, 1.714, 120, 1.38, 148, 3.826, 189,
          3.182, 192, 2.221, 195, 2.582, 241, 2.554, 371, 3.896, 372, 5.048, 373, 6.478,
          374, 5.6, 375, 5.84, 376, 5.84, 377, 5.84, 378, 5.84, 379, 5.048, 380, 4.137,
          381, 4.507, 382, 4.507, 383, 4.507, 384, 4.507, 385, 4.507, 386, 4.507,
        ],
      ],
      ["title/interfaces/ConnectionOptions.html", [0, 1.868, 387, 2.994]],
      [
        "body/interfaces/ConnectionOptions.html",
        [
          2, 2.562, 3, 0.235, 4, 0.259, 5, 0.163, 6, 2.71, 18, 0.418, 19, 1.311, 20,
          1.311, 22, 4.341, 30, 0.015, 38, 0.556, 49, 1.145, 65, 0.013, 66, 0.013, 387,
          3.892, 388, 6.813, 389, 6.813, 390, 5.407, 391, 4.432, 392, 5.021,
        ],
      ],
      ["title/classes/CreateAuthorDto.html", [119, 1.134, 213, 2.531]],
      [
        "body/classes/CreateAuthorDto.html",
        [
          3, 0.185, 4, 0.204, 5, 0.129, 18, 0.329, 19, 1.122, 20, 1.197, 28, 1.64, 30,
          0.015, 38, 0.623, 49, 0.93, 61, 3.509, 65, 0.011, 66, 0.011, 96, 2.17, 108,
          1.273, 120, 1.211, 127, 3.277, 130, 3.509, 138, 2.416, 213, 2.591, 224, 4.593,
          238, 3.979, 239, 4.818, 240, 4.302, 248, 2.134, 250, 3.065, 251, 2.591, 308,
          3.068, 393, 3.418, 394, 3.065, 395, 4.61, 396, 3.065, 397, 3.954, 398, 2.802,
          399, 3.418, 400, 2.802, 401, 3.954, 402, 3.954, 403, 3.418, 404, 3.954, 405,
          4.629, 406, 3.954, 407, 3.954,
        ],
      ],
      ["title/classes/CreateBookDto.html", [119, 1.134, 304, 2.531]],
      [
        "body/classes/CreateBookDto.html",
        [
          3, 0.144, 4, 0.159, 5, 0.1, 7, 2.134, 18, 0.257, 19, 0.942, 28, 2.045, 30,
          0.015, 38, 0.646, 49, 0.949, 52, 3.04, 65, 0.009, 66, 0.009, 96, 2.227, 108,
          1.4, 120, 0.944, 127, 3.606, 130, 4.378, 202, 1.418, 224, 4.378, 248, 1.665,
          254, 2.021, 304, 2.021, 308, 3.828, 311, 3.759, 312, 5.359, 314, 4.113, 315,
          3.887, 322, 2.391, 325, 2.185, 326, 2.185, 350, 3.486, 395, 4.733, 400, 2.185,
          403, 2.666, 405, 4.587, 408, 2.391, 409, 2.021, 410, 4.496, 411, 2.666, 412,
          3.085, 413, 3.085, 414, 3.085, 415, 3.887, 416, 3.085, 417, 2.666, 418, 3.085,
          419, 3.085, 420, 3.085, 421, 2.666, 422, 4.113, 423, 5.306, 424, 3.085, 425,
          2.185, 426, 3.085,
        ],
      ],
      ["title/classes/CreateCategoryDto.html", [119, 1.134, 346, 2.531]],
      [
        "body/classes/CreateCategoryDto.html",
        [
          3, 0.191, 4, 0.211, 5, 0.133, 7, 2.309, 18, 0.34, 19, 1.148, 28, 1.891, 30,
          0.015, 38, 0.611, 49, 0.838, 65, 0.011, 66, 0.011, 96, 2.059, 108, 1.515, 120,
          1.252, 127, 3.56, 130, 3.588, 243, 2.896, 253, 2.497, 254, 2.679, 322, 3.169,
          326, 2.896, 346, 2.679, 350, 4.787, 352, 2.896, 354, 5.338, 395, 4.375, 399,
          3.534, 415, 4.734, 421, 3.534, 427, 3.534, 428, 3.169, 429, 4.088, 430, 4.088,
          431, 5.476, 432, 4.088, 433, 4.088, 434, 4.088, 435, 4.088, 436, 4.088, 437,
          4.088,
        ],
      ],
      ["title/classes/CreateReadingListDto.html", [119, 1.134, 438, 2.359]],
      [
        "body/classes/CreateReadingListDto.html",
        [
          3, 0.207, 4, 0.229, 5, 0.144, 7, 1.843, 18, 0.368, 19, 1.209, 20, 1.061, 30,
          0.016, 38, 0.605, 49, 0.983, 65, 0.012, 66, 0.012, 96, 2.269, 108, 1.517, 120,
          1.355, 127, 3.673, 138, 3.525, 240, 4.088, 253, 2.703, 254, 2.899, 355, 3.43,
          438, 2.703, 439, 3.825, 440, 3.825, 441, 4.988, 442, 4.424, 443, 4.424, 444,
          4.424, 445, 4.424, 446, 4.424, 447, 3.825, 448, 4.424, 449, 4.424, 450, 4.424,
        ],
      ],
      ["title/classes/CreateUserDto.html", [112, 2.531, 119, 1.134]],
      [
        "body/classes/CreateUserDto.html",
        [
          3, 0.254, 4, 0.209, 5, 0.131, 7, 1.96, 18, 0.336, 19, 1.138, 28, 1.879, 30,
          0.015, 38, 0.545, 49, 1.08, 65, 0.011, 66, 0.011, 96, 2.046, 108, 1.376, 112,
          2.645, 120, 1.236, 122, 4.852, 123, 4.852, 124, 4.756, 125, 5.304, 126, 3.49,
          127, 3.696, 128, 2.86, 129, 3.49, 130, 2.645, 131, 3.847, 132, 3.49, 133, 3.49,
          134, 3.49, 135, 3.129, 136, 3.49, 137, 3.49, 138, 3.317, 205, 4.209, 451, 3.49,
          452, 3.129, 453, 4.037, 454, 4.037, 455, 4.037, 456, 3.129, 457, 4.037, 458,
          4.037,
        ],
      ],
      ["title/modules/DatabaseModule.html", [67, 2.084, 78, 2.531]],
      [
        "body/modules/DatabaseModule.html",
        [
          3, 0.237, 4, 0.262, 5, 0.165, 30, 0.015, 65, 0.013, 66, 0.013, 69, 2.332, 70,
          2.893, 78, 4.914, 80, 3.212, 81, 2.589, 82, 2.454, 146, 3.1, 147, 3.933, 459,
          4.386, 460, 4.386, 461, 4.386, 462, 5.076, 463, 5.074,
        ],
      ],
      ["title/injectables/DatabaseService.html", [186, 1.61, 462, 2.531]],
      [
        "body/injectables/DatabaseService.html",
        [
          3, 0.248, 4, 0.274, 5, 0.172, 18, 0.441, 20, 0.974, 30, 0.015, 38, 0.471, 65,
          0.013, 66, 0.013, 89, 1.979, 107, 1.622, 108, 1.11, 109, 1.555, 187, 2.209, 192,
          2.014, 391, 5.147, 462, 3.47, 464, 4.578, 465, 6.976, 466, 5.296,
        ],
      ],
      ["title/classes/EntityRepository.html", [119, 1.134, 263, 2.213]],
      [
        "body/classes/EntityRepository.html",
        [
          3, 0.133, 4, 0.147, 5, 0.092, 18, 0.236, 19, 0.887, 20, 1.23, 28, 0.87, 29,
          1.242, 30, 0.016, 33, 1.449, 38, 0.607, 49, 0.858, 65, 0.009, 66, 0.009, 89,
          1.295, 90, 2.539, 91, 3.041, 99, 3.039, 107, 2.047, 108, 1.402, 109, 1.91, 120,
          0.87, 169, 1.684, 189, 1.851, 192, 1.08, 208, 2.046, 241, 1.851, 263, 1.627,
          264, 2.772, 265, 2.772, 266, 2.772, 267, 2.772, 268, 2.772, 269, 2.284, 271,
          2.772, 273, 1.861, 274, 2.772, 275, 1.861, 276, 3.512, 277, 1.861, 278, 4.382,
          279, 3.671, 280, 1.861, 281, 1.861, 282, 4.116, 283, 3.671, 284, 1.861, 285,
          2.772, 286, 1.861, 287, 2.772, 288, 2.772, 289, 1.861, 290, 1.735, 291, 1.861,
          467, 2.455, 468, 2.84, 469, 2.84,
        ],
      ],
      ["title/interfaces/IProcessFile.html", [0, 1.868, 470, 2.736]],
      [
        "body/interfaces/IProcessFile.html",
        [
          2, 2.068, 3, 0.189, 4, 0.209, 5, 0.223, 18, 0.337, 19, 1.141, 20, 1.349, 28,
          1.667, 29, 2.382, 30, 0.015, 38, 0.628, 49, 1.05, 65, 0.011, 66, 0.011, 108,
          1.141, 470, 2.872, 471, 2.477, 472, 2.477, 473, 6.149, 474, 6.149, 475, 6.149,
          476, 6.149, 477, 5.315, 478, 4.221, 479, 3.504, 480, 5.445, 481, 4.054, 482,
          3.504, 483, 3.504, 484, 4.766, 485, 3.142, 486, 4.707, 487, 4.221, 488, 4.054,
          489, 3.504, 490, 4.054, 491, 3.142,
        ],
      ],
      ["title/interfaces/IResizeImageArgs.html", [0, 1.868, 492, 2.736]],
      [
        "body/interfaces/IResizeImageArgs.html",
        [
          2, 2.485, 3, 0.228, 4, 0.252, 5, 0.158, 18, 0.405, 19, 1.286, 20, 1.128, 30,
          0.016, 38, 0.597, 49, 1.08, 52, 4.041, 65, 0.013, 66, 0.013, 471, 2.975, 472,
          2.975, 492, 3.45, 493, 6.718, 494, 6.718, 495, 5.807, 496, 6.136,
        ],
      ],
      ["title/injectables/JwtAuthGuard.html", [186, 1.61, 497, 2.994]],
      [
        "body/injectables/JwtAuthGuard.html",
        [
          3, 0.276, 4, 0.305, 5, 0.192, 30, 0.014, 65, 0.014, 66, 0.014, 187, 2.465, 497,
          4.582, 498, 5.11,
        ],
      ],
      ["title/injectables/JwtStrategy.html", [143, 2.531, 186, 1.61]],
      [
        "body/injectables/JwtStrategy.html",
        [
          3, 0.235, 4, 0.259, 5, 0.163, 18, 0.418, 20, 1.15, 30, 0.015, 38, 0.556, 65,
          0.013, 66, 0.013, 89, 1.915, 90, 2.178, 91, 2.608, 107, 1.915, 108, 1.311, 109,
          1.474, 110, 2.877, 143, 3.29, 187, 2.094, 192, 1.91, 195, 3.903, 374, 5.407,
          499, 4.341, 500, 5.021, 501, 5.021, 502, 5.021,
        ],
      ],
      ["title/classes/ProcessFile.html", [119, 1.134, 503, 2.994]],
      [
        "body/classes/ProcessFile.html",
        [
          3, 0.158, 4, 0.175, 5, 0.182, 7, 1.082, 18, 0.282, 19, 1.008, 20, 1.028, 28,
          1.037, 29, 1.481, 30, 0.015, 38, 0.624, 49, 0.736, 59, 3.962, 65, 0.01, 66,
          0.01, 89, 1.472, 90, 2.238, 91, 2.785, 107, 1.712, 108, 1.172, 109, 1.642, 120,
          1.037, 189, 3.236, 192, 1.288, 241, 3.168, 245, 2.4, 276, 3.018, 290, 2.938,
          470, 3.407, 471, 2.069, 472, 2.069, 477, 4.157, 478, 2.625, 483, 4.157, 484,
          3.728, 486, 2.928, 487, 2.625, 492, 3.407, 495, 2.928, 503, 2.625, 504, 4.809,
          505, 4.809, 506, 4.809, 507, 4.809, 508, 5.592, 509, 3.387, 510, 3.387, 511,
          3.387, 512, 3.387, 513, 3.387, 514, 3.387, 515, 3.387, 516, 2.928, 517, 3.387,
          518, 4.809,
        ],
      ],
      ["title/guards/RolesGuard.html", [519, 2.994, 520, 2.994]],
      [
        "body/guards/RolesGuard.html",
        [
          3, 0.237, 4, 0.262, 5, 0.165, 18, 0.422, 20, 1.158, 30, 0.015, 38, 0.559, 65,
          0.013, 66, 0.013, 89, 1.928, 107, 1.928, 108, 1.32, 109, 1.489, 192, 1.93, 520,
          3.933, 521, 5.074, 522, 4.386, 523, 6.295, 524, 5.074, 525, 6.845, 526, 5.074,
          527, 6.295, 528, 5.074, 529, 5.074,
        ],
      ],
      ["title/interfaces/RuntimeSetismConfig.html", [0, 1.868, 380, 2.736]],
      [
        "body/interfaces/RuntimeSetismConfig.html",
        [
          0, 2.211, 1, 4.273, 2, 2.332, 3, 0.214, 4, 0.236, 5, 0.149, 6, 2.467, 7, 1.46,
          10, 3.951, 11, 3.951, 17, 3.543, 18, 0.38, 19, 1.235, 21, 3.951, 23, 3.951, 24,
          3.951, 30, 0.015, 37, 3.543, 38, 0.58, 57, 2.792, 61, 4.784, 64, 5.094, 65,
          0.012, 66, 0.012, 148, 4.273, 379, 5.638, 380, 3.238, 390, 3.951, 391, 3.238,
          530, 3.951, 531, 6.522, 532, 4.571, 533, 4.571, 534, 3.951, 535, 4.571, 536,
          4.571, 537, 4.571,
        ],
      ],
      ["title/interfaces/SuperadminCredentials.html", [0, 1.868, 153, 2.736]],
      [
        "body/interfaces/SuperadminCredentials.html",
        [
          2, 2.702, 3, 0.248, 4, 0.274, 5, 0.172, 6, 2.859, 18, 0.441, 19, 1.355, 28,
          1.622, 29, 2.317, 30, 0.015, 38, 0.471, 49, 0.99, 57, 3.236, 65, 0.013, 66,
          0.013, 123, 5.147, 153, 3.752, 169, 2.108, 170, 5.588, 538, 5.296,
        ],
      ],
      ["title/interfaces/SwaggerOptions.html", [0, 1.868, 539, 2.994]],
      [
        "body/interfaces/SwaggerOptions.html",
        [
          2, 2.412, 3, 0.31, 4, 0.244, 5, 0.154, 6, 2.551, 7, 2.229, 18, 0.393, 19, 1.262,
          20, 1.355, 30, 0.015, 38, 0.589, 49, 1.128, 62, 4.342, 63, 4.668, 65, 0.012, 66,
          0.012, 417, 6.031, 539, 3.664, 540, 6.976, 541, 4.727,
        ],
      ],
      ["title/classes/UpdateAuthorDto.html", [119, 1.134, 232, 2.531]],
      [
        "body/classes/UpdateAuthorDto.html",
        [
          3, 0.275, 4, 0.303, 5, 0.191, 30, 0.014, 65, 0.014, 66, 0.014, 120, 1.799, 232,
          3.85, 394, 4.554, 542, 5.079,
        ],
      ],
      ["title/classes/UpdateBookDto.html", [119, 1.134, 309, 2.531]],
      [
        "body/classes/UpdateBookDto.html",
        [
          3, 0.171, 4, 0.189, 5, 0.19, 18, 0.304, 19, 1.064, 20, 1.353, 30, 0.015, 38,
          0.636, 49, 0.892, 52, 3.339, 59, 4.686, 61, 4.334, 65, 0.01, 66, 0.01, 96,
          2.205, 120, 1.119, 127, 1.973, 202, 1.68, 248, 1.973, 308, 3.79, 309, 2.395,
          313, 4.386, 316, 4.88, 317, 4.386, 318, 4.386, 319, 4.386, 395, 4.686, 396,
          2.834, 400, 2.59, 409, 2.395, 411, 3.16, 425, 2.59, 516, 3.16, 543, 3.16, 544,
          4.518, 545, 3.933, 546, 3.655, 547, 5.828, 548, 2.834, 549, 5.074, 550, 5.074,
          551, 3.655, 552, 3.655,
        ],
      ],
      ["title/classes/UpdateCategoryDto.html", [119, 1.134, 351, 2.531]],
      [
        "body/classes/UpdateCategoryDto.html",
        [
          3, 0.275, 4, 0.303, 5, 0.191, 30, 0.014, 65, 0.014, 66, 0.014, 120, 1.799, 351,
          3.85, 428, 4.554, 553, 5.079,
        ],
      ],
      ["title/classes/UpdateUserDto.html", [119, 1.134, 554, 2.531]],
      [
        "body/classes/UpdateUserDto.html",
        [
          3, 0.172, 4, 0.19, 5, 0.119, 7, 2.116, 18, 0.305, 19, 1.066, 20, 1.354, 30,
          0.015, 38, 0.589, 49, 1.076, 52, 2.102, 61, 4.34, 65, 0.01, 66, 0.01, 96, 2.208,
          120, 1.123, 124, 5.134, 127, 3.152, 128, 2.6, 131, 4.137, 138, 3.108, 238,
          3.826, 239, 4.468, 308, 2.102, 355, 2.844, 396, 3.944, 398, 2.6, 422, 4.527,
          452, 2.844, 456, 2.844, 554, 2.404, 555, 3.172, 556, 5.451, 557, 5.087, 558,
          5.725, 559, 3.669, 560, 3.669, 561, 2.6, 562, 3.669, 563, 3.172, 564, 3.669,
          565, 3.669,
        ],
      ],
      ["title/classes/UploadBookDto.html", [119, 1.134, 303, 2.531]],
      [
        "body/classes/UploadBookDto.html",
        [
          3, 0.249, 4, 0.275, 5, 0.227, 18, 0.443, 19, 1.359, 20, 1.339, 30, 0.015, 38,
          0.576, 65, 0.013, 66, 0.013, 120, 1.63, 212, 5.027, 303, 3.489, 409, 3.489, 548,
          5.027, 566, 4.603,
        ],
      ],
      ["title/controllers/UserController.html", [85, 2.359, 567, 2.736]],
      [
        "body/controllers/UserController.html",
        [
          3, 0.15, 4, 0.166, 5, 0.105, 7, 1.736, 18, 0.495, 20, 1.094, 30, 0.015, 38,
          0.601, 49, 1.11, 65, 0.009, 66, 0.009, 87, 1.479, 89, 1.42, 96, 2.102, 97,
          2.109, 99, 3.508, 100, 4.131, 102, 2.109, 107, 1.821, 108, 1.247, 109, 1.85,
          114, 2.109, 115, 2.109, 116, 2.109, 117, 2.109, 131, 3.851, 202, 3.11, 208,
          2.243, 209, 2.503, 210, 2.503, 219, 2.28, 220, 4.214, 221, 4.214, 222, 4.214,
          223, 3.851, 226, 2.28, 228, 1.737, 231, 1.737, 438, 3.633, 554, 3.897, 567,
          2.28, 568, 2.782, 569, 4.008, 570, 2.782, 571, 3.218, 572, 3.218, 573, 3.218,
          574, 3.218, 575, 3.218, 576, 3.218,
        ],
      ],
      ["title/classes/UserEntity.html", [119, 1.134, 577, 2.994]],
      [
        "body/classes/UserEntity.html",
        [
          3, 0.127, 4, 0.14, 5, 0.088, 18, 0.226, 19, 0.857, 28, 1.677, 30, 0.016, 38,
          0.642, 49, 1.07, 65, 0.008, 66, 0.008, 90, 2.675, 96, 2.41, 120, 0.831, 122,
          2.896, 123, 2.896, 200, 2.679, 201, 2.103, 205, 3.169, 225, 1.778, 236, 1.464,
          237, 1.554, 238, 2.679, 239, 2.896, 241, 1.788, 242, 2.679, 243, 3.485, 244,
          4.163, 246, 4.046, 247, 4.375, 248, 3.902, 249, 1.922, 252, 1.922, 253, 1.657,
          255, 1.778, 256, 1.778, 398, 1.922, 422, 3.813, 438, 1.657, 556, 3.534, 558,
          3.534, 563, 3.534, 577, 2.103, 578, 1.922, 579, 4.088, 580, 4.088, 581, 4.088,
          582, 4.088, 583, 4.088, 584, 5.476, 585, 2.713, 586, 2.713, 587, 2.713, 588,
          2.713,
        ],
      ],
      ["title/modules/UserModule.html", [67, 2.084, 79, 2.531]],
      [
        "body/modules/UserModule.html",
        [
          3, 0.237, 4, 0.262, 5, 0.165, 30, 0.015, 65, 0.013, 66, 0.013, 69, 2.332, 70,
          2.893, 79, 4.982, 80, 3.212, 81, 2.589, 82, 2.454, 87, 2.332, 144, 3.863, 146,
          3.1, 567, 3.595, 589, 4.386, 590, 4.386, 591, 4.69, 592, 5.074,
        ],
      ],
      ["title/injectables/UserRepository.html", [144, 2.084, 186, 1.61]],
      [
        "body/injectables/UserRepository.html",
        [
          3, 0.132, 4, 0.146, 5, 0.092, 18, 0.235, 19, 0.883, 20, 1.228, 28, 0.864, 29,
          1.235, 30, 0.016, 33, 1.441, 38, 0.606, 49, 0.855, 65, 0.009, 66, 0.009, 89,
          1.29, 90, 2.536, 91, 3.038, 99, 3.032, 107, 2.044, 108, 1.399, 109, 1.906, 144,
          1.524, 169, 1.677, 187, 1.177, 189, 1.843, 192, 1.074, 208, 2.038, 236, 1.524,
          241, 1.843, 263, 1.618, 264, 2.76, 265, 2.76, 266, 2.76, 267, 2.76, 268, 2.76,
          269, 2.274, 271, 2.76, 273, 1.85, 274, 2.76, 275, 1.85, 276, 3.506, 277, 1.85,
          278, 4.374, 279, 3.661, 280, 1.85, 281, 1.85, 282, 4.107, 283, 3.661, 284, 1.85,
          285, 2.76, 286, 1.85, 287, 2.76, 288, 2.76, 289, 1.85, 290, 1.725, 291, 1.85,
          593, 2.441, 594, 2.823, 595, 2.823,
        ],
      ],
      ["title/injectables/UserService.html", [186, 1.61, 591, 2.531]],
      [
        "body/injectables/UserService.html",
        [
          3, 0.17, 4, 0.187, 5, 0.118, 18, 0.522, 20, 1.213, 30, 0.015, 38, 0.586, 49,
          1.094, 65, 0.01, 66, 0.01, 89, 1.545, 90, 2.558, 91, 3.064, 107, 2.02, 108,
          1.383, 109, 1.936, 110, 3.779, 144, 3.133, 187, 1.513, 192, 1.38, 193, 3.136,
          202, 2.884, 209, 2.724, 210, 2.724, 228, 1.958, 231, 1.958, 438, 3.834, 554,
          4.112, 569, 4.363, 570, 3.136, 591, 2.377, 596, 3.136, 597, 5.048, 598, 3.628,
        ],
      ],
      ["title/contributing.html", [599, 2.285, 600, 2.285, 601, 2.5]],
      [
        "body/contributing.html",
        [
          7, 1.287, 30, 0.011, 31, 2.3, 42, 2.062, 45, 2.3, 47, 2.062, 48, 2.062, 57,
          1.625, 65, 0.008, 66, 0.008, 138, 1.625, 169, 1.604, 208, 1.287, 339, 2.3, 425,
          1.885, 491, 2.062, 530, 2.3, 544, 3.123, 545, 2.062, 561, 4.127, 599, 2.854,
          600, 2.854, 601, 2.062, 602, 4.203, 603, 3.482, 604, 5.504, 605, 4.028, 606,
          2.66, 607, 4.028, 608, 2.66, 609, 2.66, 610, 2.66, 611, 2.66, 612, 2.66, 613,
          2.66, 614, 3.482, 615, 3.482, 616, 4.028, 617, 2.3, 618, 2.3, 619, 2.66, 620,
          2.66, 621, 3.482, 622, 3.482, 623, 2.66, 624, 2.3, 625, 2.3, 626, 2.66, 627,
          2.3, 628, 2.66, 629, 2.66, 630, 2.3, 631, 2.66, 632, 4.862, 633, 4.028, 634,
          2.66, 635, 2.66, 636, 2.66, 637, 3.769, 638, 2.66, 639, 2.66, 640, 2.3, 641,
          4.862, 642, 3.482, 643, 2.66, 644, 2.66, 645, 2.66, 646, 2.66, 647, 5.422, 648,
          2.66, 649, 5.504, 650, 2.66, 651, 2.3, 652, 2.66, 653, 2.66, 654, 2.3, 655,
          4.028, 656, 5.036, 657, 2.66, 658, 3.482, 659, 2.66, 660, 2.66, 661, 2.3, 662,
          2.3, 663, 2.66, 664, 5.422, 665, 4.028, 666, 2.66, 667, 2.66, 668, 4.028, 669,
          2.66, 670, 2.3, 671, 2.66, 672, 2.66, 673, 2.66, 674, 2.66, 675, 2.66, 676,
          3.482, 677, 2.66, 678, 2.3, 679, 2.66, 680, 2.66, 681, 2.66, 682, 2.66, 683,
          2.66, 684, 4.028, 685, 4.028, 686, 2.66, 687, 4.028, 688, 2.66, 689, 2.66, 690,
          2.66, 691, 4.028, 692, 2.66, 693, 2.66, 694, 2.66, 695, 4.028, 696, 2.66, 697,
          2.3, 698, 2.66, 699, 2.66, 700, 2.66, 701, 4.028, 702, 4.687, 703, 2.66, 704,
          4.028, 705, 3.482, 706, 2.3, 707, 2.66, 708, 2.66, 709, 2.66, 710, 4.028, 711,
          2.66, 712, 2.3, 713, 2.66, 714, 2.66, 715, 2.66, 716, 2.66, 717, 2.3, 718, 2.66,
          719, 2.66,
        ],
      ],
      ["title/coverage.html", [720, 4.555]],
      [
        "body/coverage.html",
        [
          0, 2.698, 1, 1.111, 5, 0.055, 6, 2.715, 30, 0.016, 33, 3.96, 38, 0.151, 62,
          1.111, 65, 0.006, 66, 0.006, 85, 2.849, 86, 1.201, 88, 1.466, 95, 1.111, 112,
          1.111, 119, 2.02, 121, 1.466, 142, 1.111, 143, 1.111, 144, 0.915, 148, 1.111,
          153, 1.201, 186, 2.611, 188, 1.466, 195, 0.971, 206, 1.201, 207, 2.182, 213,
          1.111, 232, 1.111, 234, 1.314, 235, 1.995, 237, 0.971, 251, 1.111, 259, 1.036,
          260, 1.111, 262, 1.466, 263, 0.971, 292, 1.466, 299, 1.466, 300, 1.201, 301,
          1.466, 303, 1.111, 304, 1.111, 309, 1.111, 310, 1.995, 330, 1.036, 331, 1.111,
          333, 1.466, 336, 1.466, 343, 1.201, 344, 2.182, 346, 1.111, 351, 1.111, 352,
          1.201, 353, 1.995, 358, 1.036, 359, 1.111, 361, 1.466, 364, 1.466, 371, 1.466,
          380, 1.201, 387, 1.314, 393, 1.466, 394, 2.182, 408, 2.799, 409, 3.056, 427,
          1.466, 428, 2.182, 438, 1.036, 439, 1.466, 440, 1.466, 451, 1.466, 452, 2.182,
          462, 1.111, 464, 1.466, 467, 1.466, 470, 1.201, 471, 2.568, 472, 2.568, 492,
          1.201, 497, 1.314, 498, 1.466, 499, 1.466, 503, 1.314, 519, 1.314, 520, 1.314,
          522, 1.466, 539, 1.314, 542, 1.466, 543, 1.466, 553, 1.466, 554, 1.111, 555,
          1.466, 561, 1.201, 566, 1.466, 567, 1.201, 568, 1.466, 577, 1.314, 578, 1.995,
          591, 1.111, 593, 1.466, 596, 1.466, 717, 1.466, 720, 1.466, 721, 1.696, 722,
          1.696, 723, 5.03, 724, 5.579, 725, 2.434, 726, 6.262, 727, 1.466, 728, 7.046,
          729, 1.466, 730, 3.61, 731, 2.434, 732, 3.61, 733, 4.203, 734, 1.466, 735, 5.03,
          736, 1.466, 737, 1.466, 738, 1.696, 739, 1.466, 740, 2.815, 741, 1.466, 742,
          3.61, 743, 1.696, 744, 1.696, 745, 1.696, 746, 1.696, 747, 1.696, 748, 1.696,
          749, 1.696, 750, 1.696, 751, 1.696, 752, 2.182, 753, 5.33, 754, 1.314, 755,
          2.434, 756, 1.466, 757, 1.466, 758, 1.696, 759, 1.466, 760, 3.634, 761, 3.634,
          762, 1.466, 763, 1.466, 764, 1.466, 765, 1.466, 766, 1.466, 767, 1.466, 768,
          1.696, 769, 1.696, 770, 1.696, 771, 1.696,
        ],
      ],
      ["title/dependencies.html", [70, 2.134, 624, 2.788]],
      [
        "body/dependencies.html",
        [
          26, 3.156, 30, 0.016, 43, 4.233, 65, 0.011, 66, 0.011, 70, 1.871, 119, 1.603,
          160, 3.519, 482, 3.519, 772, 4.071, 773, 6.585, 774, 4.071, 775, 4.071, 776,
          4.071, 777, 4.071, 778, 4.071, 779, 5.461, 780, 4.071, 781, 4.071, 782, 4.071,
          783, 4.071, 784, 4.071, 785, 4.071, 786, 4.071, 787, 4.071, 788, 4.071, 789,
          4.071, 790, 4.071, 791, 4.071, 792, 4.071, 793, 4.071, 794, 4.071, 795, 4.071,
          796, 3.519, 797, 4.071, 798, 4.071, 799, 4.071, 800, 5.461, 801, 4.071, 802,
          4.071, 803, 4.071, 804, 4.071, 805, 4.071, 806, 4.071, 807, 4.071, 808, 4.071,
          809, 4.071, 810, 4.071, 811, 4.071, 812, 4.071, 813, 4.071, 814, 4.071,
        ],
      ],
      ["title/miscellaneous/enumerations.html", [815, 1.741, 816, 4.015]],
      [
        "body/miscellaneous/enumerations.html",
        [
          6, 2.388, 18, 0.368, 29, 3.36, 30, 0.016, 33, 2.257, 47, 4.473, 48, 4.473, 65,
          0.012, 66, 0.012, 90, 1.54, 135, 3.43, 183, 3.825, 189, 1.935, 200, 3.781, 224,
          2.899, 253, 2.703, 314, 3.43, 325, 3.135, 456, 3.43, 815, 2.388, 816, 3.825,
          817, 4.424, 818, 4.988, 819, 3.825, 820, 4.988, 821, 3.825, 822, 5.77, 823,
          5.77, 824, 3.825, 825, 4.988, 826, 3.825, 827, 4.424, 828, 4.424, 829, 4.424,
          830, 4.424,
        ],
      ],
      ["title/miscellaneous/functions.html", [815, 1.741, 831, 4.015]],
      [
        "body/miscellaneous/functions.html",
        [
          5, 0.218, 7, 1.985, 18, 0.258, 20, 1.193, 30, 0.015, 38, 0.576, 49, 1.102, 59,
          4.86, 65, 0.009, 66, 0.009, 107, 1.986, 108, 1.438, 109, 1.904, 245, 2.199, 246,
          2.96, 248, 1.676, 276, 3.157, 308, 3.351, 484, 4.818, 485, 4.128, 489, 2.684,
          651, 3.905, 678, 2.684, 752, 2.406, 754, 4.128, 756, 2.684, 757, 3.905, 760,
          2.684, 761, 5.372, 762, 3.905, 763, 3.905, 764, 3.905, 765, 3.905, 766, 2.684,
          767, 3.905, 815, 1.676, 831, 2.684, 832, 2.684, 833, 3.104, 834, 5.848, 835,
          3.104, 836, 3.104, 837, 4.517, 838, 3.104, 839, 3.104, 840, 5.848, 841, 3.104,
          842, 3.104, 843, 3.104, 844, 3.104, 845, 3.104, 846, 3.104, 847, 3.104, 848,
          3.104, 849, 2.684, 850, 3.104, 851, 3.104,
        ],
      ],
      ["title/index.html", [18, 0.268, 599, 2.285, 600, 2.285]],
      [
        "body/index.html",
        [
          3, 0.154, 5, 0.067, 13, 1.59, 17, 1.59, 26, 1.59, 30, 0.014, 39, 1.773, 42,
          3.651, 44, 4.071, 56, 1.773, 57, 1.253, 62, 1.344, 63, 1.59, 65, 0.007, 66,
          0.007, 90, 0.714, 149, 1.773, 157, 1.773, 161, 2.843, 189, 0.897, 240, 3.652,
          307, 2.33, 308, 2.954, 316, 1.59, 372, 1.773, 400, 2.33, 425, 1.453, 485, 1.59,
          491, 1.59, 544, 2.55, 545, 2.55, 561, 1.453, 601, 3.191, 602, 1.773, 603, 1.773,
          604, 1.773, 614, 4.071, 615, 3.559, 617, 1.773, 618, 1.773, 621, 3.559, 622,
          1.773, 627, 1.773, 630, 1.773, 637, 1.59, 640, 3.559, 642, 2.843, 649, 3.559,
          654, 2.843, 656, 1.773, 658, 1.773, 661, 1.773, 662, 1.773, 670, 1.773, 676,
          2.843, 697, 2.843, 702, 1.773, 705, 3.559, 706, 1.773, 712, 1.773, 796, 1.773,
          849, 1.773, 852, 4.117, 853, 2.051, 854, 2.051, 855, 3.289, 856, 4.71, 857,
          3.191, 858, 3.289, 859, 2.051, 860, 2.051, 861, 2.051, 862, 2.051, 863, 2.051,
          864, 2.051, 865, 2.051, 866, 2.051, 867, 2.051, 868, 2.051, 869, 2.051, 870,
          2.051, 871, 2.051, 872, 3.289, 873, 2.843, 874, 3.289, 875, 2.051, 876, 2.051,
          877, 2.051, 878, 4.456, 879, 2.051, 880, 2.051, 881, 2.051, 882, 2.051, 883,
          2.051, 884, 1.773, 885, 5.78, 886, 2.051, 887, 3.289, 888, 2.051, 889, 2.051,
          890, 2.051, 891, 2.051, 892, 2.051, 893, 4.117, 894, 3.289, 895, 2.051, 896,
          2.051, 897, 4.117, 898, 2.051, 899, 2.051, 900, 2.051, 901, 2.051, 902, 2.051,
          903, 2.051, 904, 2.051, 905, 2.051, 906, 2.051, 907, 2.051, 908, 3.289, 909,
          4.71, 910, 2.051, 911, 2.051, 912, 2.051, 913, 2.051, 914, 2.051, 915, 2.051,
          916, 1.773, 917, 2.051, 918, 2.051, 919, 2.843, 920, 1.773, 921, 2.051, 922,
          2.051, 923, 2.051, 924, 2.051, 925, 2.051, 926, 2.051, 927, 2.051, 928, 3.289,
          929, 2.051, 930, 3.289, 931, 2.051, 932, 1.773, 933, 2.051, 934, 2.051, 935,
          2.051, 936, 2.051, 937, 2.051, 938, 2.051, 939, 2.051, 940, 2.051, 941, 2.051,
          942, 2.051, 943, 2.051, 944, 2.051, 945, 2.051, 946, 2.051, 947, 2.051, 948,
          2.051, 949, 2.051, 950, 2.051, 951, 2.051, 952, 2.051, 953, 2.051, 954, 2.051,
          955, 2.051, 956, 2.051, 957, 2.051, 958, 2.051, 959, 2.051, 960, 2.051, 961,
          2.051, 962, 3.289, 963, 2.051, 964, 3.289, 965, 2.051, 966, 2.051, 967, 2.051,
          968, 3.289, 969, 2.051, 970, 2.051, 971, 2.051, 972, 2.051, 973, 2.051, 974,
          2.051, 975, 2.051, 976, 2.051, 977, 2.051, 978, 2.051, 979, 3.289, 980, 2.051,
          981, 2.051, 982, 2.051, 983, 2.051, 984, 2.051, 985, 2.051, 986, 2.051, 987,
          2.051, 988, 2.051, 989, 2.051, 990, 2.051, 991, 2.051, 992, 2.051, 993, 2.051,
          994, 2.051, 995, 2.051, 996, 2.051, 997, 2.051, 998, 1.773, 999, 2.051, 1000,
          2.051, 1001, 2.051, 1002, 2.051, 1003, 2.051, 1004, 2.051, 1005, 2.051, 1006,
          2.843, 1007, 2.051, 1008, 2.051, 1009, 2.051, 1010, 2.051, 1011, 2.051, 1012,
          2.051, 1013, 2.051,
        ],
      ],
      ["title/license.html", [599, 2.285, 600, 2.285, 857, 2.5]],
      [
        "body/license.html",
        [
          30, 0.011, 43, 3.004, 62, 2.539, 65, 0.011, 66, 0.011, 82, 1.874, 307, 2.745,
          321, 3.004, 367, 3.35, 391, 2.745, 441, 3.35, 534, 4.566, 625, 3.35, 637, 4.094,
          857, 3.004, 873, 3.35, 884, 3.35, 998, 3.35, 1006, 3.35, 1014, 6.009, 1015,
          3.875, 1016, 5.282, 1017, 3.875, 1018, 3.875, 1019, 3.875, 1020, 3.875, 1021,
          3.875, 1022, 5.282, 1023, 7.36, 1024, 3.875, 1025, 3.875, 1026, 5.194, 1027,
          3.875, 1028, 3.875, 1029, 3.875, 1030, 3.875, 1031, 3.875, 1032, 3.875, 1033,
          3.875, 1034, 3.875, 1035, 3.875, 1036, 3.875, 1037, 5.282, 1038, 3.875, 1039,
          3.875, 1040, 3.875, 1041, 3.875, 1042, 3.875, 1043, 3.875, 1044, 5.282, 1045,
          5.282, 1046, 3.875, 1047, 3.875, 1048, 3.875, 1049, 3.875, 1050, 3.875, 1051,
          3.875, 1052, 3.875, 1053, 3.875, 1054, 3.875, 1055, 3.875, 1056, 3.875, 1057,
          3.875, 1058, 3.875, 1059, 3.875, 1060, 3.875, 1061, 3.35, 1062, 3.875, 1063,
          3.875, 1064, 3.875, 1065, 3.875, 1066, 3.875, 1067, 3.875, 1068, 3.875, 1069,
          3.875, 1070, 3.875,
        ],
      ],
      ["title/modules.html", [69, 2.422]],
      [
        "body/modules.html",
        [
          30, 0.013, 65, 0.013, 66, 0.013, 68, 3.45, 69, 2.238, 73, 3.191, 74, 3.191, 75,
          3.191, 76, 3.191, 77, 3.191, 78, 3.191, 79, 3.191, 920, 6.589, 1071, 7.622,
          1072, 7.622, 1073, 7.622,
        ],
      ],
      ["title/overview.html", [1074, 4.555]],
      [
        "body/overview.html",
        [
          2, 1.511, 30, 0.016, 65, 0.009, 66, 0.009, 68, 5.281, 69, 1.361, 70, 2.006, 71,
          2.56, 72, 2.56, 73, 4.605, 74, 4.322, 75, 4.322, 76, 4.322, 77, 3.747, 78, 4.18,
          79, 4.322, 80, 2.227, 81, 1.511, 82, 1.433, 87, 1.361, 120, 0.907, 139, 2.56,
          140, 2.56, 141, 2.56, 142, 4.322, 143, 3.396, 144, 3.087, 187, 1.235, 195,
          3.277, 257, 2.56, 258, 2.56, 259, 3.166, 260, 3.396, 325, 2.098, 328, 2.56, 329,
          2.56, 330, 3.166, 331, 3.396, 356, 2.56, 357, 2.56, 358, 3.166, 359, 3.396, 368,
          2.56, 369, 2.56, 398, 2.098, 459, 2.56, 460, 2.56, 461, 2.56, 462, 4.322, 519,
          2.296, 589, 2.56, 590, 2.56, 591, 3.396, 825, 2.56, 1074, 2.56, 1075, 4.365,
          1076, 2.962,
        ],
      ],
      ["title/miscellaneous/typealiases.html", [815, 1.741, 1077, 4.644]],
      [
        "body/miscellaneous/typealiases.html",
        [
          5, 0.145, 18, 0.372, 30, 0.015, 38, 0.397, 65, 0.012, 66, 0.012, 200, 2.926,
          201, 4.5, 235, 3.164, 238, 2.926, 310, 3.164, 353, 3.164, 447, 5.018, 471,
          2.728, 472, 4.172, 478, 4.5, 479, 3.86, 487, 4.5, 548, 3.461, 578, 3.164, 815,
          2.41, 818, 3.86, 819, 3.86, 820, 5.018, 821, 3.86, 824, 3.86, 826, 3.86, 932,
          3.86, 1078, 4.465, 1079, 5.804, 1080, 3.86, 1081, 5.804, 1082, 3.86, 1083,
          5.804, 1084, 3.86, 1085, 5.575, 1086, 6.449, 1087, 5.804, 1088, 3.86, 1089,
          4.465, 1090, 4.465,
        ],
      ],
      ["title/miscellaneous/variables.html", [815, 1.741, 1091, 4.015]],
      [
        "body/miscellaneous/variables.html",
        [
          13, 2.399, 18, 0.258, 28, 2.227, 29, 3.182, 30, 0.016, 38, 0.594, 49, 1.024, 65,
          0.011, 66, 0.009, 200, 2.028, 207, 2.399, 235, 2.192, 310, 2.192, 311, 2.192,
          321, 2.399, 344, 2.399, 353, 2.192, 408, 2.399, 409, 3.483, 471, 1.89, 472,
          2.753, 578, 2.192, 725, 2.675, 727, 3.896, 729, 3.896, 731, 5.048, 734, 3.896,
          736, 3.896, 737, 3.896, 739, 3.896, 741, 3.896, 752, 2.399, 754, 2.399, 755,
          5.048, 759, 3.896, 815, 1.67, 832, 2.675, 878, 2.675, 916, 2.675, 919, 2.675,
          1026, 2.675, 1061, 2.675, 1080, 2.675, 1082, 2.675, 1084, 2.675, 1085, 2.675,
          1088, 2.675, 1091, 2.675, 1092, 4.507, 1093, 3.094, 1094, 3.094, 1095, 4.507,
          1096, 3.094, 1097, 3.094, 1098, 5.316, 1099, 3.094, 1100, 3.094, 1101, 3.094,
          1102, 3.094, 1103, 3.094, 1104, 3.094, 1105, 3.094, 1106, 3.094, 1107, 3.094,
          1108, 3.094, 1109, 3.094, 1110, 3.094, 1111, 3.094, 1112, 3.094, 1113, 3.094,
          1114, 3.094, 1115, 3.094, 1116, 3.094, 1117, 3.094, 1118, 3.094, 1119, 3.094,
          1120, 3.094, 1121, 3.094, 1122, 4.507, 1123, 3.094, 1124, 3.094,
        ],
      ],
    ],
    invertedIndex: [
      [
        "",
        {
          _index: 30,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "modules/AuthModule.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "contributing.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "0",
        {
          _index: 33,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "injectables/AuthorRepository.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
            "coverage.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["0.1.13", { _index: 805, title: {}, body: { "dependencies.html": {} } }],
      ["0.13.1", { _index: 789, title: {}, body: { "dependencies.html": {} } }],
      ["0.28.2", { _index: 785, title: {}, body: { "dependencies.html": {} } }],
      ["0.29.1", { _index: 811, title: {}, body: { "dependencies.html": {} } }],
      ["0.4.0", { _index: 787, title: {}, body: { "dependencies.html": {} } }],
      ["0.4.1", { _index: 801, title: {}, body: { "dependencies.html": {} } }],
      ["0/1", { _index: 728, title: {}, body: { "coverage.html": {} } }],
      ["0/10", { _index: 735, title: {}, body: { "coverage.html": {} } }],
      ["0/14", { _index: 738, title: {}, body: { "coverage.html": {} } }],
      ["0/15", { _index: 758, title: {}, body: { "coverage.html": {} } }],
      ["0/2", { _index: 751, title: {}, body: { "coverage.html": {} } }],
      ["0/3", { _index: 723, title: {}, body: { "coverage.html": {} } }],
      ["0/4", { _index: 730, title: {}, body: { "coverage.html": {} } }],
      ["0/5", { _index: 733, title: {}, body: { "coverage.html": {} } }],
      ["0/6", { _index: 724, title: {}, body: { "coverage.html": {} } }],
      ["0/7", { _index: 740, title: {}, body: { "coverage.html": {} } }],
      ["0/8", { _index: 732, title: {}, body: { "coverage.html": {} } }],
      [
        "1",
        {
          _index: 825,
          title: {},
          body: { "miscellaneous/enumerations.html": {}, "overview.html": {} },
        },
      ],
      ["1.0.1", { _index: 775, title: {}, body: { "dependencies.html": {} } }],
      ["1.11.0", { _index: 791, title: {}, body: { "dependencies.html": {} } }],
      ["1.4.3", { _index: 799, title: {}, body: { "dependencies.html": {} } }],
      ["1/2", { _index: 748, title: {}, body: { "coverage.html": {} } }],
      ["100", { _index: 742, title: {}, body: { "coverage.html": {} } }],
      [
        "1024",
        { _index: 446, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      ["10h", { _index: 185, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      [
        "12",
        {
          _index: 398,
          title: {},
          body: {
            "classes/CreateAuthorDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UserEntity.html": {},
            "overview.html": {},
          },
        },
      ],
      ["13", { _index: 324, title: {}, body: { "classes/BookEntity.html": {} } }],
      [
        "13''})@isdefined({message",
        { _index: 418, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "1519211809934})@isnumberstring",
        { _index: 424, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      ["19", { _index: 1076, title: {}, body: { "overview.html": {} } }],
      [
        "2",
        {
          _index: 183,
          title: {},
          body: {
            "interfaces/AuthOptions.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["2/3", { _index: 746, title: {}, body: { "coverage.html": {} } }],
      [
        "20",
        {
          _index: 355,
          title: {},
          body: {
            "classes/CategoryEntity.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      ["200", { _index: 35, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["2021", { _index: 1015, title: {}, body: { "license.html": {} } }],
      [
        "2048",
        {
          _index: 250,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateAuthorDto.html": {},
          },
        },
      ],
      [
        "256",
        {
          _index: 326,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      ["26", { _index: 458, title: {}, body: { "classes/CreateUserDto.html": {} } }],
      [
        "3",
        {
          _index: 253,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/UserEntity.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["3.0.2", { _index: 807, title: {}, body: { "dependencies.html": {} } }],
      ["3/4", { _index: 750, title: {}, body: { "coverage.html": {} } }],
      ["3000", { _index: 53, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "32",
        {
          _index: 137,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      ["33", { _index: 892, title: {}, body: { "index.html": {} } }],
      [
        "4",
        {
          _index: 456,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "classes/UpdateUserDto.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["4.0.0", { _index: 802, title: {}, body: { "dependencies.html": {} } }],
      ["4.1.6", { _index: 813, title: {}, body: { "dependencies.html": {} } }],
      ["4.6.0", { _index: 795, title: {}, body: { "dependencies.html": {} } }],
      ["4/4", { _index: 747, title: {}, body: { "coverage.html": {} } }],
      [
        "4096",
        {
          _index: 322,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      [
        "5",
        {
          _index: 325,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "classes/CreateBookDto.html": {},
            "miscellaneous/enumerations.html": {},
            "overview.html": {},
          },
        },
      ],
      ["5.0.9", { _index: 783, title: {}, body: { "dependencies.html": {} } }],
      ["5.13.8", { _index: 797, title: {}, body: { "dependencies.html": {} } }],
      ["5/5", { _index: 744, title: {}, body: { "coverage.html": {} } }],
      ["5/6", { _index: 769, title: {}, body: { "coverage.html": {} } }],
      [
        "50",
        {
          _index: 717,
          title: {},
          body: { "contributing.html": {}, "coverage.html": {} },
        },
      ],
      [
        "54",
        {
          _index: 254,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
          },
        },
      ],
      ["55", { _index: 896, title: {}, body: { "index.html": {} } }],
      [
        "6",
        {
          _index: 135,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateUserDto.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["6.0.2", { _index: 793, title: {}, body: { "dependencies.html": {} } }],
      ["60", { _index: 182, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["66", { _index: 745, title: {}, body: { "coverage.html": {} } }],
      ["7.2.0", { _index: 809, title: {}, body: { "dependencies.html": {} } }],
      ["7/7", { _index: 743, title: {}, body: { "coverage.html": {} } }],
      ["70", { _index: 899, title: {}, body: { "index.html": {} } }],
      ["75", { _index: 749, title: {}, body: { "coverage.html": {} } }],
      ["7d", { _index: 171, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["8", { _index: 1075, title: {}, body: { "overview.html": {} } }],
      ["8.0.0", { _index: 773, title: {}, body: { "dependencies.html": {} } }],
      ["8.0.1", { _index: 779, title: {}, body: { "dependencies.html": {} } }],
      ["8.3.2", { _index: 814, title: {}, body: { "dependencies.html": {} } }],
      ["83", { _index: 768, title: {}, body: { "coverage.html": {} } }],
      [
        "9780062574350})@isisbn(13",
        { _index: 416, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "__v",
        {
          _index: 291,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "_id",
        {
          _index: 242,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "ability",
        { _index: 1101, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["above", { _index: 1043, title: {}, body: { "license.html": {} } }],
      [
        "absolute",
        { _index: 840, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["acceptable", { _index: 636, title: {}, body: { "contributing.html": {} } }],
      [
        "access",
        {
          _index: 161,
          title: {},
          body: { "interfaces/AuthOptions.html": {}, "index.html": {} },
        },
      ],
      ["accessible", { _index: 888, title: {}, body: { "index.html": {} } }],
      [
        "accessors",
        { _index: 375, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      ["according", { _index: 973, title: {}, body: { "index.html": {} } }],
      [
        "account",
        { _index: 538, title: {}, body: { "interfaces/SuperadminCredentials.html": {} } },
      ],
      ["acknowledgements", { _index: 858, title: {}, body: { "index.html": {} } }],
      [
        "acquired",
        { _index: 1114, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["action", { _index: 1065, title: {}, body: { "license.html": {} } }],
      [
        "action.'})@apiforbiddenresponse({description",
        { _index: 105, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      ["add", { _index: 709, title: {}, body: { "contributing.html": {} } }],
      ["added", { _index: 562, title: {}, body: { "classes/UpdateUserDto.html": {} } }],
      [
        "address",
        {
          _index: 125,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      [
        "admin",
        { _index: 828, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      ["agree", { _index: 634, title: {}, body: { "contributing.html": {} } }],
      [
        "aliases",
        { _index: 1078, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      ["allowing", { _index: 14, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["allows", { _index: 937, title: {}, body: { "index.html": {} } }],
      ["along", { _index: 887, title: {}, body: { "index.html": {} } }],
      ["amazing", { _index: 607, title: {}, body: { "contributing.html": {} } }],
      ["and/or", { _index: 1035, title: {}, body: { "license.html": {} } }],
      ["andrei", { _index: 1003, title: {}, body: { "index.html": {} } }],
      ["anyone", { _index: 889, title: {}, body: { "index.html": {} } }],
      ["anytime", { _index: 853, title: {}, body: { "index.html": {} } }],
      ["anywhere", { _index: 854, title: {}, body: { "index.html": {} } }],
      [
        "api",
        {
          _index: 3,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "modules/AuthModule.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "apibody({type",
        {
          _index: 97,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "apiokresponse({description",
        {
          _index: 220,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "apioptions",
        {
          _index: 1,
          title: { "interfaces/ApiOptions.html": {} },
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/ConfigService.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "apiproperty({description",
        {
          _index: 395,
          title: {},
          body: {
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/UpdateBookDto.html": {},
          },
        },
      ],
      [
        "apiproperty({type",
        {
          _index: 124,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "apis",
        {
          _index: 11,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      [
        "app",
        {
          _index: 678,
          title: {},
          body: { "contributing.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "appmodule",
        {
          _index: 68,
          title: { "modules/AppModule.html": {} },
          body: { "modules/AppModule.html": {}, "modules.html": {}, "overview.html": {} },
        },
      ],
      ["appreciated", { _index: 984, title: {}, body: { "index.html": {} } }],
      ["argon2", { _index: 784, title: {}, body: { "dependencies.html": {} } }],
      ["args", { _index: 510, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["arising", { _index: 1069, title: {}, body: { "license.html": {} } }],
      ["articulate", { _index: 914, title: {}, body: { "index.html": {} } }],
      ["assets", { _index: 960, title: {}, body: { "index.html": {} } }],
      ["associated", { _index: 1024, title: {}, body: { "license.html": {} } }],
      [
        "async",
        {
          _index: 91,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "authcontroller",
        {
          _index: 86,
          title: { "controllers/AuthController.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authdto",
        {
          _index: 95,
          title: { "classes/AuthDto.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "injectables/AuthService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authdto})@apiokresponse({description",
        { _index: 98, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "authentication",
        {
          _index: 149,
          title: {},
          body: { "interfaces/AuthOptions.html": {}, "index.html": {} },
        },
      ],
      [
        "authmodule",
        {
          _index: 73,
          title: { "modules/AuthModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "authoptions",
        {
          _index: 148,
          title: { "interfaces/AuthOptions.html": {} },
          body: {
            "interfaces/AuthOptions.html": {},
            "classes/ConfigService.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "author",
        {
          _index: 224,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "classes/BookEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      [
        "author's",
        { _index: 401, title: {}, body: { "classes/CreateAuthorDto.html": {} } },
      ],
      [
        "author.dto.ts",
        {
          _index: 394,
          title: {},
          body: {
            "classes/CreateAuthorDto.html": {},
            "classes/UpdateAuthorDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authorcontroller",
        {
          _index: 206,
          title: { "controllers/AuthorController.html": {} },
          body: {
            "controllers/AuthorController.html": {},
            "modules/AuthorModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authordocument",
        { _index: 1079, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      [
        "authorentity",
        {
          _index: 234,
          title: { "classes/AuthorEntity.html": {} },
          body: { "classes/AuthorEntity.html": {}, "coverage.html": {} },
        },
      ],
      [
        "authorentityschema",
        {
          _index: 734,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "authorization",
        {
          _index: 37,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      [
        "authormodel",
        { _index: 272, title: {}, body: { "injectables/AuthorRepository.html": {} } },
      ],
      [
        "authormodule",
        {
          _index: 74,
          title: { "modules/AuthorModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthorModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "authorname",
        { _index: 298, title: {}, body: { "injectables/AuthorService.html": {} } },
      ],
      [
        "authorrepository",
        {
          _index: 259,
          title: { "injectables/AuthorRepository.html": {} },
          body: {
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "authors",
        {
          _index: 321,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "license.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "authorservice",
        {
          _index: 260,
          title: { "injectables/AuthorService.html": {} },
          body: {
            "modules/AuthorModule.html": {},
            "injectables/AuthorService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "authservice",
        {
          _index: 142,
          title: { "injectables/AuthService.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      ["automatically", { _index: 971, title: {}, body: { "index.html": {} } }],
      [
        "available",
        { _index: 50, title: {}, body: { "interfaces/ApiOptions.html": {} } },
      ],
      [
        "avatar",
        {
          _index: 238,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UserEntity.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "avoiding",
        { _index: 1108, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "b",
        {
          _index: 339,
          title: {},
          body: { "injectables/BookService.html": {}, "contributing.html": {} },
        },
      ],
      ["back", { _index: 952, title: {}, body: { "index.html": {} } }],
      ["backend", { _index: 863, title: {}, body: { "index.html": {} } }],
      [
        "base",
        {
          _index: 56,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "index.html": {} },
        },
      ],
      [
        "baseentityschema",
        {
          _index: 237,
          title: { "classes/BaseEntitySchema.html": {} },
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "baseprojection",
        {
          _index: 264,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "being",
        { _index: 617, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["believe", { _index: 900, title: {}, body: { "index.html": {} } }],
      [
        "belongs",
        { _index: 436, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      [
        "biography",
        {
          _index: 239,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "birthday",
        {
          _index: 556,
          title: {},
          body: { "classes/UpdateUserDto.html": {}, "classes/UserEntity.html": {} },
        },
      ],
      [
        "book",
        {
          _index: 308,
          title: {},
          body: {
            "controllers/BookController.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "book.dto.ts",
        {
          _index: 409,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UploadBookDto.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "book_description",
        {
          _index: 736,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "book_description})@isstring({message",
        { _index: 412, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "book_name",
        {
          _index: 737,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "book_name})@isstring({message",
        { _index: 419, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "bookcontroller",
        {
          _index: 300,
          title: { "controllers/BookController.html": {} },
          body: {
            "controllers/BookController.html": {},
            "modules/BookModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "bookdocument",
        { _index: 1081, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      [
        "bookentity",
        {
          _index: 251,
          title: { "classes/BookEntity.html": {} },
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "bookentityschema",
        {
          _index: 739,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "bookmodel",
        { _index: 335, title: {}, body: { "injectables/BookRepository.html": {} } },
      ],
      [
        "bookmodule",
        {
          _index: 75,
          title: { "modules/BookModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/BookModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "bookname",
        { _index: 341, title: {}, body: { "injectables/BookService.html": {} } },
      ],
      [
        "bookrepository",
        {
          _index: 330,
          title: { "injectables/BookRepository.html": {} },
          body: {
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "books",
        {
          _index: 240,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "bookservice",
        {
          _index: 331,
          title: { "injectables/BookService.html": {} },
          body: {
            "modules/BookModule.html": {},
            "injectables/BookService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      ["boolean", { _index: 529, title: {}, body: { "guards/RolesGuard.html": {} } }],
      [
        "bootstrap",
        {
          _index: 754,
          title: {},
          body: {
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["borwser", { _index: 923, title: {}, body: { "index.html": {} } }],
      ["both", { _index: 58, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["brain", { _index: 905, title: {}, body: { "index.html": {} } }],
      ["branch", { _index: 701, title: {}, body: { "contributing.html": {} } }],
      ["branching", { _index: 700, title: {}, body: { "contributing.html": {} } }],
      ["browse", { _index: 1073, title: {}, body: { "modules.html": {} } }],
      [
        "browser",
        { _index: 920, title: {}, body: { "index.html": {}, "modules.html": {} } },
      ],
      [
        "buffer",
        {
          _index: 484,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "classes/ProcessFile.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["bug", { _index: 647, title: {}, body: { "contributing.html": {} } }],
      ["bugs", { _index: 989, title: {}, body: { "index.html": {} } }],
      ["build", { _index: 881, title: {}, body: { "index.html": {} } }],
      ["built", { _index: 947, title: {}, body: { "index.html": {} } }],
      [
        "c",
        {
          _index: 367,
          title: {},
          body: { "injectables/CategoryService.html": {}, "license.html": {} },
        },
      ],
      ["canactivate", { _index: 523, title: {}, body: { "guards/RolesGuard.html": {} } }],
      [
        "canactivate(context",
        { _index: 526, title: {}, body: { "guards/RolesGuard.html": {} } },
      ],
      ["careers", { _index: 902, title: {}, body: { "index.html": {} } }],
      [
        "categories",
        {
          _index: 311,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateBookDto.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "category",
        {
          _index: 350,
          title: {},
          body: {
            "controllers/CategoryController.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      [
        "category.dto.ts",
        {
          _index: 428,
          title: {},
          body: {
            "classes/CreateCategoryDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "categorycontroller",
        {
          _index: 343,
          title: { "controllers/CategoryController.html": {} },
          body: {
            "controllers/CategoryController.html": {},
            "modules/CategoryModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "categorydocument",
        { _index: 1083, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      [
        "categoryentity",
        {
          _index: 352,
          title: { "classes/CategoryEntity.html": {} },
          body: {
            "classes/CategoryEntity.html": {},
            "classes/CreateCategoryDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "categoryentityschema",
        {
          _index: 741,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "categorymodel",
        { _index: 363, title: {}, body: { "injectables/CategoryRepository.html": {} } },
      ],
      [
        "categorymodule",
        {
          _index: 76,
          title: { "modules/CategoryModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/CategoryModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "categoryrepository",
        {
          _index: 358,
          title: { "injectables/CategoryRepository.html": {} },
          body: {
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "categoryservice",
        {
          _index: 359,
          title: { "injectables/CategoryService.html": {} },
          body: {
            "modules/CategoryModule.html": {},
            "injectables/CategoryService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "changes",
        { _index: 706, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "characters",
        {
          _index: 138,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UpdateUserDto.html": {},
            "contributing.html": {},
          },
        },
      ],
      [
        "characters!'})@isdefined({message",
        {
          _index: 415,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      [
        "characters!'})@maxlength(14",
        { _index: 565, title: {}, body: { "classes/UpdateUserDto.html": {} } },
      ],
      [
        "characters!'})@maxlength(2048",
        {
          _index: 399,
          title: {},
          body: {
            "classes/CreateAuthorDto.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      [
        "characters!'})@maxlength(256",
        {
          _index: 421,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      [
        "characters!'})@maxlength(26",
        { _index: 457, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "characters!'})@maxlength(32",
        {
          _index: 136,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      [
        "characters!'})@maxlength(4096",
        { _index: 414, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "characters'})@maxlength(1024",
        { _index: 445, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      [
        "characters'})@maxlength(54",
        { _index: 450, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      ["charge", { _index: 1019, title: {}, body: { "license.html": {} } }],
      ["checked", { _index: 991, title: {}, body: { "index.html": {} } }],
      ["checkout", { _index: 703, title: {}, body: { "contributing.html": {} } }],
      ["chirila", { _index: 1004, title: {}, body: { "index.html": {} } }],
      [
        "claim",
        {
          _index: 1061,
          title: {},
          body: { "license.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "class",
        {
          _index: 119,
          title: {
            "classes/AuthDto.html": {},
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/ConfigService.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/EntityRepository.html": {},
            "classes/ProcessFile.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "classes/UserEntity.html": {},
          },
          body: { "coverage.html": {}, "dependencies.html": {} },
        },
      ],
      [
        "classes",
        {
          _index: 120,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/ConfigService.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/EntityRepository.html": {},
            "classes/ProcessFile.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "classes/UserEntity.html": {},
            "overview.html": {},
          },
        },
      ],
      ["click", { _index: 660, title: {}, body: { "contributing.html": {} } }],
      ["clone", { _index: 693, title: {}, body: { "contributing.html": {} } }],
      [
        "cluster_appmodule",
        {
          _index: 71,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_appmodule_imports",
        {
          _index: 72,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authmodule",
        {
          _index: 139,
          title: {},
          body: { "modules/AuthModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authmodule_exports",
        {
          _index: 140,
          title: {},
          body: { "modules/AuthModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authmodule_providers",
        {
          _index: 141,
          title: {},
          body: { "modules/AuthModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authormodule",
        {
          _index: 257,
          title: {},
          body: { "modules/AuthorModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_authormodule_providers",
        {
          _index: 258,
          title: {},
          body: { "modules/AuthorModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_bookmodule",
        {
          _index: 328,
          title: {},
          body: { "modules/BookModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_bookmodule_providers",
        {
          _index: 329,
          title: {},
          body: { "modules/BookModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_categorymodule",
        {
          _index: 356,
          title: {},
          body: { "modules/CategoryModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_categorymodule_providers",
        {
          _index: 357,
          title: {},
          body: { "modules/CategoryModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_configmodule",
        {
          _index: 368,
          title: {},
          body: { "modules/ConfigModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_configmodule_exports",
        {
          _index: 369,
          title: {},
          body: { "modules/ConfigModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_databasemodule",
        {
          _index: 459,
          title: {},
          body: { "modules/DatabaseModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_databasemodule_exports",
        {
          _index: 460,
          title: {},
          body: { "modules/DatabaseModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_databasemodule_providers",
        {
          _index: 461,
          title: {},
          body: { "modules/DatabaseModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usermodule",
        {
          _index: 589,
          title: {},
          body: { "modules/UserModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usermodule_providers",
        {
          _index: 590,
          title: {},
          body: { "modules/UserModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "code",
        { _index: 614, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "codebase",
        { _index: 618, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "commit",
        { _index: 705, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["commitlint", { _index: 978, title: {}, body: { "index.html": {} } }],
      ["common", { _index: 974, title: {}, body: { "index.html": {} } }],
      ["community", { _index: 605, title: {}, body: { "contributing.html": {} } }],
      ["compodoc", { _index: 962, title: {}, body: { "index.html": {} } }],
      ["conditions", { _index: 1042, title: {}, body: { "license.html": {} } }],
      [
        "config",
        {
          _index: 372,
          title: {},
          body: { "classes/ConfigService.html": {}, "index.html": {} },
        },
      ],
      [
        "configmodule",
        {
          _index: 77,
          title: { "modules/ConfigModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/ConfigModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "configservice",
        {
          _index: 195,
          title: { "classes/ConfigService.html": {} },
          body: {
            "injectables/AuthService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "injectables/JwtStrategy.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "configuration",
        { _index: 531, title: {}, body: { "interfaces/RuntimeSetismConfig.html": {} } },
      ],
      [
        "configures",
        { _index: 167, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "conflict.'})@apiforbiddenresponse({description",
        {
          _index: 117,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "connect",
        { _index: 537, title: {}, body: { "interfaces/RuntimeSetismConfig.html": {} } },
      ],
      [
        "connection",
        {
          _index: 391,
          title: {},
          body: {
            "interfaces/ConnectionOptions.html": {},
            "injectables/DatabaseService.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "connectionoptions",
        {
          _index: 387,
          title: { "interfaces/ConnectionOptions.html": {} },
          body: { "interfaces/ConnectionOptions.html": {}, "coverage.html": {} },
        },
      ],
      [
        "connectionuri",
        { _index: 388, title: {}, body: { "interfaces/ConnectionOptions.html": {} } },
      ],
      ["consists", { _index: 948, title: {}, body: { "index.html": {} } }],
      [
        "constructor",
        {
          _index: 192,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/ConfigService.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "constructor(args",
        { _index: 509, title: {}, body: { "classes/ProcessFile.html": {} } },
      ],
      [
        "constructor(authormodel",
        { _index: 270, title: {}, body: { "injectables/AuthorRepository.html": {} } },
      ],
      [
        "constructor(authorrepository",
        { _index: 295, title: {}, body: { "injectables/AuthorService.html": {} } },
      ],
      [
        "constructor(bookmodel",
        { _index: 334, title: {}, body: { "injectables/BookRepository.html": {} } },
      ],
      [
        "constructor(bookrepository",
        { _index: 338, title: {}, body: { "injectables/BookService.html": {} } },
      ],
      [
        "constructor(categorymodel",
        { _index: 362, title: {}, body: { "injectables/CategoryRepository.html": {} } },
      ],
      [
        "constructor(categoryrepository",
        { _index: 365, title: {}, body: { "injectables/CategoryService.html": {} } },
      ],
      [
        "constructor(configservice",
        { _index: 500, title: {}, body: { "injectables/JwtStrategy.html": {} } },
      ],
      [
        "constructor(connection",
        { _index: 466, title: {}, body: { "injectables/DatabaseService.html": {} } },
      ],
      [
        "constructor(entitymodal",
        { _index: 468, title: {}, body: { "classes/EntityRepository.html": {} } },
      ],
      [
        "constructor(reflector",
        { _index: 524, title: {}, body: { "guards/RolesGuard.html": {} } },
      ],
      [
        "constructor(usermodel",
        { _index: 594, title: {}, body: { "injectables/UserRepository.html": {} } },
      ],
      [
        "constructor(userrepository",
        {
          _index: 193,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "containing",
        { _index: 846, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["content", { _index: 922, title: {}, body: { "index.html": {} } }],
      ["context", { _index: 528, title: {}, body: { "guards/RolesGuard.html": {} } }],
      ["contract", { _index: 1066, title: {}, body: { "license.html": {} } }],
      ["contribute", { _index: 996, title: {}, body: { "index.html": {} } }],
      [
        "contributing",
        {
          _index: 601,
          title: { "contributing.html": {} },
          body: { "contributing.html": {}, "index.html": {} },
        },
      ],
      [
        "contributions",
        { _index: 602, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["contributors", { _index: 856, title: {}, body: { "index.html": {} } }],
      [
        "controller",
        {
          _index: 85,
          title: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
          body: { "coverage.html": {} },
        },
      ],
      [
        "controller_name",
        {
          _index: 731,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "controllers",
        {
          _index: 87,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "modules/AuthModule.html": {},
            "controllers/AuthorController.html": {},
            "modules/AuthorModule.html": {},
            "controllers/BookController.html": {},
            "modules/BookModule.html": {},
            "controllers/CategoryController.html": {},
            "modules/CategoryModule.html": {},
            "controllers/UserController.html": {},
            "modules/UserModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["conventional", { _index: 979, title: {}, body: { "index.html": {} } }],
      ["copies", { _index: 1037, title: {}, body: { "license.html": {} } }],
      ["copy", { _index: 1022, title: {}, body: { "license.html": {} } }],
      ["copyright", { _index: 1014, title: {}, body: { "license.html": {} } }],
      [
        "cors",
        {
          _index: 21,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      [
        "corsoptions",
        { _index: 27, title: {}, body: { "interfaces/ApiOptions.html": {} } },
      ],
      [
        "cover",
        {
          _index: 548,
          title: {},
          body: {
            "classes/UpdateBookDto.html": {},
            "classes/UploadBookDto.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "coverage",
        { _index: 720, title: { "coverage.html": {} }, body: { "coverage.html": {} } },
      ],
      ["covers", { _index: 997, title: {}, body: { "index.html": {} } }],
      [
        "create",
        {
          _index: 169,
          title: {},
          body: {
            "interfaces/AuthOptions.html": {},
            "controllers/AuthorController.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "injectables/UserRepository.html": {},
            "contributing.html": {},
          },
        },
      ],
      [
        "create(c",
        { _index: 366, title: {}, body: { "injectables/CategoryService.html": {} } },
      ],
      [
        "create(createcategorydto",
        { _index: 345, title: {}, body: { "controllers/CategoryController.html": {} } },
      ],
      [
        "create(createentitydata",
        {
          _index: 273,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "create(file",
        {
          _index: 211,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
          },
        },
      ],
      [
        "create(files",
        {
          _index: 302,
          title: {},
          body: {
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
          },
        },
      ],
      [
        "create.dto.ts",
        {
          _index: 440,
          title: {},
          body: { "classes/CreateReadingListDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "createauthordto",
        {
          _index: 213,
          title: { "classes/CreateAuthorDto.html": {} },
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "classes/CreateAuthorDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createauthordto})@apicreatedresponse({description",
        { _index: 214, title: {}, body: { "controllers/AuthorController.html": {} } },
      ],
      [
        "createbookdto",
        {
          _index: 304,
          title: { "classes/CreateBookDto.html": {} },
          body: {
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "classes/CreateBookDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createbookdto})@apicreatedresponse({description",
        { _index: 305, title: {}, body: { "controllers/BookController.html": {} } },
      ],
      [
        "createcategorydto",
        {
          _index: 346,
          title: { "classes/CreateCategoryDto.html": {} },
          body: {
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "classes/CreateCategoryDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createcategorydto})@apicreatedresponse({description",
        { _index: 347, title: {}, body: { "controllers/CategoryController.html": {} } },
      ],
      [
        "created",
        { _index: 843, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "created.'})@apibadrequestresponse({description",
        {
          _index: 114,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "createdocument",
        {
          _index: 757,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "createdocument(app",
        { _index: 836, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "createentitydata",
        {
          _index: 275,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "createlist",
        {
          _index: 569,
          title: {},
          body: {
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "createlist(id",
        {
          _index: 570,
          title: {},
          body: {
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "createreadinglistdto",
        {
          _index: 438,
          title: { "classes/CreateReadingListDto.html": {} },
          body: {
            "classes/CreateReadingListDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createreadinglistdto})@apicreatedresponse({description",
        { _index: 571, title: {}, body: { "controllers/UserController.html": {} } },
      ],
      [
        "createuserdto",
        {
          _index: 112,
          title: { "classes/CreateUserDto.html": {} },
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/CreateUserDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createuserdto})@apicreatedresponse({description",
        { _index: 113, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      ["creating", { _index: 927, title: {}, body: { "index.html": {} } }],
      [
        "credentials",
        { _index: 168, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "critic",
        { _index: 830, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      ["critics", { _index: 939, title: {}, body: { "index.html": {} } }],
      ["csurf", { _index: 790, title: {}, body: { "dependencies.html": {} } }],
      [
        "current",
        { _index: 541, title: {}, body: { "interfaces/SwaggerOptions.html": {} } },
      ],
      ["currently", { _index: 680, title: {}, body: { "contributing.html": {} } }],
      [
        "custom",
        { _index: 480, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      [
        "customext",
        { _index: 473, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      [
        "customname",
        { _index: 474, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      [
        "customoptions",
        { _index: 493, title: {}, body: { "interfaces/IResizeImageArgs.html": {} } },
      ],
      ["damages", { _index: 1062, title: {}, body: { "license.html": {} } }],
      ["dark/light", { _index: 942, title: {}, body: { "index.html": {} } }],
      [
        "data",
        {
          _index: 485,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "database",
        {
          _index: 390,
          title: {},
          body: {
            "interfaces/ConnectionOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      [
        "databasemodule",
        {
          _index: 78,
          title: { "modules/DatabaseModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "databaseservice",
        {
          _index: 462,
          title: { "injectables/DatabaseService.html": {} },
          body: {
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "date",
        {
          _index: 422,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      ["days", { _index: 184, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      [
        "dboptions",
        {
          _index: 379,
          title: {},
          body: {
            "classes/ConfigService.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      ["deal", { _index: 1025, title: {}, body: { "license.html": {} } }],
      ["dealings", { _index: 1070, title: {}, body: { "license.html": {} } }],
      ["deals", { _index: 906, title: {}, body: { "index.html": {} } }],
      [
        "decoding",
        { _index: 158, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "decorators",
        {
          _index: 96,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "default",
        {
          _index: 28,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "classes/ProcessFile.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "define",
        {
          _index: 8,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "interfaces/AuthOptions.html": {} },
        },
      ],
      [
        "defined",
        { _index: 532, title: {}, body: { "interfaces/RuntimeSetismConfig.html": {} } },
      ],
      [
        "dekoo",
        { _index: 873, title: {}, body: { "index.html": {}, "license.html": {} } },
      ],
      ["dekoo.tk", { _index: 862, title: {}, body: { "index.html": {} } }],
      [
        "deletemany",
        {
          _index: 265,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "deletemany(entityfilterquery",
        {
          _index: 277,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "deleteone",
        {
          _index: 266,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "deleteone(entityfilterquery",
        {
          _index: 280,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "dependencies",
        {
          _index: 70,
          title: { "dependencies.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
            "dependencies.html": {},
            "overview.html": {},
          },
        },
      ],
      ["depression", { _index: 907, title: {}, body: { "index.html": {} } }],
      ["depressive", { _index: 911, title: {}, body: { "index.html": {} } }],
      [
        "describing",
        { _index: 177, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "description",
        {
          _index: 7,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/ProcessFile.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateUserDto.html": {},
            "controllers/UserController.html": {},
            "contributing.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["detailed", { _index: 718, title: {}, body: { "contributing.html": {} } }],
      ["details", { _index: 1002, title: {}, body: { "index.html": {} } }],
      [
        "development",
        {
          _index: 47,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "contributing.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["dir", { _index: 514, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["directly", { _index: 993, title: {}, body: { "index.html": {} } }],
      [
        "directory",
        {
          _index: 489,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["discuss", { _index: 672, title: {}, body: { "contributing.html": {} } }],
      ["discussing", { _index: 648, title: {}, body: { "contributing.html": {} } }],
      ["discussion", { _index: 631, title: {}, body: { "contributing.html": {} } }],
      ["discussions", { _index: 633, title: {}, body: { "contributing.html": {} } }],
      ["distribute", { _index: 1033, title: {}, body: { "license.html": {} } }],
      [
        "docs",
        {
          _index: 44,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "index.html": {} },
        },
      ],
      ["docs.dekoo.tk", { _index: 864, title: {}, body: { "index.html": {} } }],
      ["document", { _index: 995, title: {}, body: { "index.html": {} } }],
      [
        "documentation",
        {
          _index: 62,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/SwaggerOptions.html": {},
            "coverage.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "doespathexist",
        {
          _index: 762,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "doespathexist(path",
        { _index: 839, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "doing",
        { _index: 1106, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["done", { _index: 1103, title: {}, body: { "miscellaneous/variables.html": {} } }],
      ["download", { _index: 931, title: {}, body: { "index.html": {} } }],
      [
        "drucker",
        { _index: 1099, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["e2e", { _index: 965, title: {}, body: { "index.html": {} } }],
      [
        "effective",
        { _index: 1118, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["eg", { _index: 181, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      [
        "email",
        {
          _index: 122,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "injectables/AuthService.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "email!'})@isdefined({message",
        {
          _index: 129,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      [
        "empty",
        {
          _index: 130,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateUserDto.html": {},
          },
        },
      ],
      [
        "empty!'})@minlength(4",
        { _index: 455, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      [
        "empty!'})@minlength(6",
        {
          _index: 133,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      ["end", { _index: 953, title: {}, body: { "index.html": {} } }],
      ["ensure", { _index: 668, title: {}, body: { "contributing.html": {} } }],
      [
        "entire",
        { _index: 627, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "entityfilterquery",
        {
          _index: 279,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "entityid",
        {
          _index: 285,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "entitymodal",
        { _index: 469, title: {}, body: { "classes/EntityRepository.html": {} } },
      ],
      [
        "entityrepository",
        {
          _index: 263,
          title: { "classes/EntityRepository.html": {} },
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["entry", { _index: 404, title: {}, body: { "classes/CreateAuthorDto.html": {} } }],
      ["enum", { _index: 587, title: {}, body: { "classes/UserEntity.html": {} } }],
      [
        "enumerations",
        {
          _index: 816,
          title: { "miscellaneous/enumerations.html": {} },
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "env",
        {
          _index: 22,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/ConnectionOptions.html": {},
          },
        },
      ],
      ["envalid", { _index: 792, title: {}, body: { "dependencies.html": {} } }],
      [
        "environment",
        {
          _index: 48,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "contributing.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["eslint", { _index: 975, title: {}, body: { "index.html": {} } }],
      ["esteem", { _index: 918, title: {}, body: { "index.html": {} } }],
      [
        "etc",
        { _index: 536, title: {}, body: { "interfaces/RuntimeSetismConfig.html": {} } },
      ],
      ["event", { _index: 1058, title: {}, body: { "license.html": {} } }],
      ["everyone", { _index: 890, title: {}, body: { "index.html": {} } }],
      [
        "example",
        {
          _index: 849,
          title: {},
          body: { "miscellaneous/functions.html": {}, "index.html": {} },
        },
      ],
      [
        "executioncontext",
        { _index: 527, title: {}, body: { "guards/RolesGuard.html": {} } },
      ],
      [
        "executive",
        { _index: 1098, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["expect", { _index: 639, title: {}, body: { "contributing.html": {} } }],
      [
        "exports",
        {
          _index: 147,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
          },
        },
      ],
      ["exposed", { _index: 12, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "exposedheaders",
        { _index: 36, title: {}, body: { "interfaces/ApiOptions.html": {} } },
      ],
      [
        "express",
        {
          _index: 43,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "dependencies.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "express.multer.file",
        {
          _index: 212,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "classes/UploadBookDto.html": {},
          },
        },
      ],
      [
        "expressed",
        { _index: 176, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      ["ext", { _index: 504, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["extended", { _index: 16, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "extends",
        {
          _index: 236,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "extension",
        { _index: 481, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      ["extra", { _index: 163, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["f", { _index: 342, title: {}, body: { "injectables/BookService.html": {} } }],
      ["fact", { _index: 879, title: {}, body: { "index.html": {} } }],
      [
        "failed",
        {
          _index: 102,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "false",
        {
          _index: 245,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/ProcessFile.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "false})@isoptional",
        {
          _index: 396,
          title: {},
          body: {
            "classes/CreateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "false})@isoptional()@isdate({message",
        { _index: 560, title: {}, body: { "classes/UpdateUserDto.html": {} } },
      ],
      [
        "false})@isoptional()@minlength(12",
        { _index: 397, title: {}, body: { "classes/CreateAuthorDto.html": {} } },
      ],
      [
        "false})@isoptional()@minlength(20",
        { _index: 559, title: {}, body: { "classes/UpdateUserDto.html": {} } },
      ],
      [
        "false})@isoptional()@minlength(4",
        { _index: 564, title: {}, body: { "classes/UpdateUserDto.html": {} } },
      ],
      [
        "false})@ispositive({message",
        { _index: 551, title: {}, body: { "classes/UpdateBookDto.html": {} } },
      ],
      [
        "false})@isstring({each",
        { _index: 546, title: {}, body: { "classes/UpdateBookDto.html": {} } },
      ],
      [
        "false})@isstring({message",
        { _index: 549, title: {}, body: { "classes/UpdateBookDto.html": {} } },
      ],
      ["favorite", { _index: 946, title: {}, body: { "index.html": {} } }],
      ["feat", { _index: 708, title: {}, body: { "contributing.html": {} } }],
      [
        "feature",
        { _index: 649, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "feature/#_amazing",
        { _index: 704, title: {}, body: { "contributing.html": {} } },
      ],
      [
        "features",
        { _index: 654, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["feedback", { _index: 855, title: {}, body: { "index.html": {} } }],
      ["feel", { _index: 894, title: {}, body: { "index.html": {} } }],
      [
        "fiction'})@isstring({message",
        { _index: 434, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      [
        "file",
        {
          _index: 5,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "modules/AuthModule.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "file.ts",
        {
          _index: 472,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "classes/ProcessFile.html": {},
            "coverage.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "filebuffer",
        { _index: 475, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      ["filename", { _index: 505, title: {}, body: { "classes/ProcessFile.html": {} } }],
      [
        "files",
        {
          _index: 307,
          title: {},
          body: {
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "filetype",
        { _index: 476, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      [
        "filterquery",
        {
          _index: 278,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "find",
        {
          _index: 208,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorRepository.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
            "contributing.html": {},
          },
        },
      ],
      [
        "find(entityfilterquery",
        {
          _index: 281,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "find(id",
        {
          _index: 219,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "findall",
        {
          _index: 293,
          title: {},
          body: {
            "injectables/AuthorService.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryService.html": {},
          },
        },
      ],
      [
        "findbyid",
        {
          _index: 267,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "findbyid(entityid",
        {
          _index: 284,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "findbyidandupdate",
        {
          _index: 268,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "findbyidandupdate(entityid",
        {
          _index: 286,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "findone",
        {
          _index: 269,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "findone(entityfilterquery",
        {
          _index: 289,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "findone(id",
        {
          _index: 296,
          title: {},
          body: {
            "injectables/AuthorService.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryService.html": {},
          },
        },
      ],
      ["first", { _index: 671, title: {}, body: { "contributing.html": {} } }],
      ["firstlogin", { _index: 579, title: {}, body: { "classes/UserEntity.html": {} } }],
      ["fiter", { _index: 945, title: {}, body: { "index.html": {} } }],
      ["fitness", { _index: 1054, title: {}, body: { "license.html": {} } }],
      ["fits", { _index: 675, title: {}, body: { "contributing.html": {} } }],
      ["fixes", { _index: 665, title: {}, body: { "contributing.html": {} } }],
      [
        "fixing",
        { _index: 662, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["folder", { _index: 958, title: {}, body: { "index.html": {} } }],
      [
        "follow",
        { _index: 658, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "following",
        { _index: 998, title: {}, body: { "index.html": {}, "license.html": {} } },
      ],
      ["follows", { _index: 1000, title: {}, body: { "index.html": {} } }],
      [
        "forbidden!'})@apiparam({name",
        {
          _index: 223,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "forbidden!'})@get",
        {
          _index: 227,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
          },
        },
      ],
      [
        "forbidden!'})@post(':id/list",
        { _index: 572, title: {}, body: { "controllers/UserController.html": {} } },
      ],
      [
        "forbidden!'})@post('signin",
        { _index: 106, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "forbidden!'})@post('signup",
        { _index: 118, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "forbidden!'})@useroles(role.admin",
        { _index: 348, title: {}, body: { "controllers/CategoryController.html": {} } },
      ],
      [
        "forbidden!'})@useroles(role.admin)@useguards(jwtauthguard",
        { _index: 573, title: {}, body: { "controllers/UserController.html": {} } },
      ],
      [
        "forbidden!'})@useroles(role.publisher",
        {
          _index: 215,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
          },
        },
      ],
      ["fork", { _index: 692, title: {}, body: { "contributing.html": {} } }],
      ["format", { _index: 933, title: {}, body: { "index.html": {} } }],
      [
        "formated",
        { _index: 851, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "formatstringforpath",
        {
          _index: 767,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "formatstringforpath(rawname",
        { _index: 847, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["formatted", { _index: 972, title: {}, body: { "index.html": {} } }],
      [
        "found",
        {
          _index: 651,
          title: {},
          body: { "contributing.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "found.'})@apiforbiddenresponse({description",
        {
          _index: 222,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      ["framework", { _index: 954, title: {}, body: { "index.html": {} } }],
      [
        "free",
        { _index: 884, title: {}, body: { "index.html": {}, "license.html": {} } },
      ],
      ["full", { _index: 453, title: {}, body: { "classes/CreateUserDto.html": {} } }],
      [
        "fullname",
        {
          _index: 205,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "fullname'})@isdefined({message",
        { _index: 454, title: {}, body: { "classes/CreateUserDto.html": {} } },
      ],
      ["function", { _index: 753, title: {}, body: { "coverage.html": {} } }],
      [
        "functions",
        {
          _index: 831,
          title: { "miscellaneous/functions.html": {} },
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      ["furnished", { _index: 1040, title: {}, body: { "license.html": {} } }],
      [
        "getapioptions",
        { _index: 384, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "getauthoptions",
        { _index: 385, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "getdbhandle",
        { _index: 465, title: {}, body: { "injectables/DatabaseService.html": {} } },
      ],
      [
        "getdboptions",
        { _index: 386, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "getisdevelopment",
        { _index: 381, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "getisproduction",
        { _index: 382, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "getistest",
        { _index: 383, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "getoutputdir",
        { _index: 506, title: {}, body: { "classes/ProcessFile.html": {} } },
      ],
      [
        "getoutputdir(usestaticpath",
        { _index: 511, title: {}, body: { "classes/ProcessFile.html": {} } },
      ],
      [
        "getting",
        {
          _index: 599,
          title: { "contributing.html": {}, "index.html": {}, "license.html": {} },
          body: { "contributing.html": {} },
        },
      ],
      [
        "git",
        { _index: 702, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["github", { _index: 1011, title: {}, body: { "index.html": {} } }],
      ["github's", { _index: 635, title: {}, body: { "contributing.html": {} } }],
      ["golden", { _index: 659, title: {}, body: { "contributing.html": {} } }],
      ["granted", { _index: 1018, title: {}, body: { "license.html": {} } }],
      ["greatly", { _index: 983, title: {}, body: { "index.html": {} } }],
      ["ground", { _index: 629, title: {}, body: { "contributing.html": {} } }],
      ["gt", { _index: 850, title: {}, body: { "miscellaneous/functions.html": {} } }],
      [
        "guard",
        {
          _index: 519,
          title: { "guards/RolesGuard.html": {} },
          body: { "coverage.html": {}, "overview.html": {} },
        },
      ],
      ["guards", { _index: 521, title: {}, body: { "guards/RolesGuard.html": {} } }],
      ["guidelines", { _index: 632, title: {}, body: { "contributing.html": {} } }],
      [
        "habits",
        { _index: 1115, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["handling", { _index: 40, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["happier", { _index: 895, title: {}, body: { "index.html": {} } }],
      ["hash", { _index: 204, title: {}, body: { "injectables/AuthService.html": {} } }],
      [
        "hashing",
        { _index: 165, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      ["heartily", { _index: 611, title: {}, body: { "contributing.html": {} } }],
      [
        "height",
        { _index: 494, title: {}, body: { "interfaces/IResizeImageArgs.html": {} } },
      ],
      ["helmet", { _index: 794, title: {}, body: { "dependencies.html": {} } }],
      ["help", { _index: 909, title: {}, body: { "index.html": {} } }],
      [
        "here",
        { _index: 661, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["here's", { _index: 891, title: {}, body: { "index.html": {} } }],
      ["hereby", { _index: 1017, title: {}, body: { "license.html": {} } }],
      ["heroku", { _index: 1010, title: {}, body: { "index.html": {} } }],
      ["holders", { _index: 1059, title: {}, body: { "license.html": {} } }],
      [
        "hostname",
        {
          _index: 23,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      ["husky", { _index: 1013, title: {}, body: { "index.html": {} } }],
      [
        "id",
        {
          _index: 202,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "classes/CreateBookDto.html": {},
            "classes/UpdateBookDto.html": {},
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "id'})@delete(':id",
        { _index: 575, title: {}, body: { "controllers/UserController.html": {} } },
      ],
      [
        "id'})@get(':id",
        {
          _index: 226,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "id'})@patch(':id",
        { _index: 576, title: {}, body: { "controllers/UserController.html": {} } },
      ],
      [
        "id'})@useroles(role.admin",
        {
          _index: 229,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
          },
        },
      ],
      ["idea", { _index: 650, title: {}, body: { "contributing.html": {} } }],
      ["ideas", { _index: 653, title: {}, body: { "contributing.html": {} } }],
      ["identifier", { _index: 721, title: {}, body: { "coverage.html": {} } }],
      ["ids", { _index: 402, title: {}, body: { "classes/CreateAuthorDto.html": {} } }],
      [
        "image",
        {
          _index: 516,
          title: {},
          body: { "classes/ProcessFile.html": {}, "classes/UpdateBookDto.html": {} },
        },
      ],
      [
        "imagination",
        { _index: 1111, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["img", { _index: 1008, title: {}, body: { "index.html": {} } }],
      ["impact", { _index: 901, title: {}, body: { "index.html": {} } }],
      ["implement", { _index: 655, title: {}, body: { "contributing.html": {} } }],
      ["implementing", { _index: 663, title: {}, body: { "contributing.html": {} } }],
      ["implied", { _index: 1051, title: {}, body: { "license.html": {} } }],
      ["important", { _index: 934, title: {}, body: { "index.html": {} } }],
      ["imports", { _index: 84, title: {}, body: { "modules/AppModule.html": {} } }],
      ["included", { _index: 1046, title: {}, body: { "license.html": {} } }],
      [
        "including",
        {
          _index: 534,
          title: {},
          body: { "interfaces/RuntimeSetismConfig.html": {}, "license.html": {} },
        },
      ],
      ["increase", { _index: 915, title: {}, body: { "index.html": {} } }],
      [
        "index",
        {
          _index: 18,
          title: { "index.html": {} },
          body: {
            "interfaces/ApiOptions.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "inestapplication",
        { _index: 837, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "info",
        {
          _index: 4,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "modules/AuthModule.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["information", { _index: 1007, title: {}, body: { "index.html": {} } }],
      ["initial", { _index: 719, title: {}, body: { "contributing.html": {} } }],
      [
        "injectable",
        {
          _index: 186,
          title: {
            "injectables/AuthService.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "injectables/DatabaseService.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
          },
          body: { "coverage.html": {} },
        },
      ],
      [
        "injectables",
        {
          _index: 187,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "injectables/DatabaseService.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "overview.html": {},
          },
        },
      ],
      ["inspire", { _index: 610, title: {}, body: { "contributing.html": {} } }],
      ["inspired", { _index: 880, title: {}, body: { "index.html": {} } }],
      ["install", { _index: 695, title: {}, body: { "contributing.html": {} } }],
      ["installation", { _index: 691, title: {}, body: { "contributing.html": {} } }],
      ["instantly", { _index: 921, title: {}, body: { "index.html": {} } }],
      [
        "intelligence",
        { _index: 1110, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["interested", { _index: 992, title: {}, body: { "index.html": {} } }],
      [
        "interface",
        {
          _index: 0,
          title: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "interfaces/ConnectionOptions.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
          },
          body: { "interfaces/RuntimeSetismConfig.html": {}, "coverage.html": {} },
        },
      ],
      [
        "interfaces",
        {
          _index: 2,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "interfaces/ConnectionOptions.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "internal",
        {
          _index: 116,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "internalcomment",
        { _index: 580, title: {}, body: { "classes/UserEntity.html": {} } },
      ],
      [
        "involves",
        { _index: 1105, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "iprocessfile",
        {
          _index: 470,
          title: { "interfaces/IProcessFile.html": {} },
          body: {
            "interfaces/IProcessFile.html": {},
            "classes/ProcessFile.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "iresizeimageargs",
        {
          _index: 492,
          title: { "interfaces/IResizeImageArgs.html": {} },
          body: {
            "interfaces/IResizeImageArgs.html": {},
            "classes/ProcessFile.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "isbn",
        {
          _index: 312,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/CreateBookDto.html": {} },
        },
      ],
      [
        "isdevelopment",
        { _index: 376, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "isenum(readinglistkind)@isdefined",
        { _index: 448, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      ["isn't", { _index: 619, title: {}, body: { "contributing.html": {} } }],
      [
        "isproduction",
        { _index: 377, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      [
        "isstring()@isdefined()@minlength(3",
        { _index: 449, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      [
        "isstring()@isoptional()@minlength(20",
        { _index: 444, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      [
        "isstring({each",
        { _index: 442, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      [
        "isstring({message",
        { _index: 410, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "issue",
        { _index: 656, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "issues",
        { _index: 640, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["istest", { _index: 378, title: {}, body: { "classes/ConfigService.html": {} } }],
      ["it'd", { _index: 673, title: {}, body: { "contributing.html": {} } }],
      [
        "it's",
        { _index: 622, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["jest", { _index: 977, title: {}, body: { "index.html": {} } }],
      [
        "jiles'})@isstring({message",
        { _index: 407, title: {}, body: { "classes/CreateAuthorDto.html": {} } },
      ],
      [
        "job",
        {
          _index: 916,
          title: {},
          body: { "index.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "jpeg",
        {
          _index: 479,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "jwt",
        {
          _index: 160,
          title: {},
          body: { "interfaces/AuthOptions.html": {}, "dependencies.html": {} },
        },
      ],
      [
        "jwtauthguard",
        {
          _index: 497,
          title: { "injectables/JwtAuthGuard.html": {} },
          body: { "injectables/JwtAuthGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "jwtsecretkey",
        { _index: 151, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "jwtservice",
        { _index: 194, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      [
        "jwtstrategy",
        {
          _index: 143,
          title: { "injectables/JwtStrategy.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "injectables/JwtStrategy.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "key",
        {
          _index: 157,
          title: {},
          body: { "interfaces/AuthOptions.html": {}, "index.html": {} },
        },
      ],
      ["keywords", { _index: 714, title: {}, body: { "contributing.html": {} } }],
      [
        "kind",
        {
          _index: 441,
          title: {},
          body: { "classes/CreateReadingListDto.html": {}, "license.html": {} },
        },
      ],
      [
        "knowledge",
        { _index: 1112, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["known", { _index: 982, title: {}, body: { "index.html": {} } }],
      ["lastlogin", { _index: 581, title: {}, body: { "classes/UserEntity.html": {} } }],
      ["later", { _index: 926, title: {}, body: { "index.html": {} } }],
      [
        "layer",
        {
          _index: 15,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "interfaces/AuthOptions.html": {} },
        },
      ],
      [
        "layered",
        { _index: 429, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      ["learn", { _index: 609, title: {}, body: { "contributing.html": {} } }],
      ["leave", { _index: 940, title: {}, body: { "index.html": {} } }],
      ["length", { _index: 172, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["liability", { _index: 1063, title: {}, body: { "license.html": {} } }],
      ["liable", { _index: 1060, title: {}, body: { "license.html": {} } }],
      ["library", { _index: 623, title: {}, body: { "contributing.html": {} } }],
      [
        "license",
        {
          _index: 857,
          title: { "license.html": {} },
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["licensed", { _index: 1005, title: {}, body: { "index.html": {} } }],
      ["limitation", { _index: 1028, title: {}, body: { "license.html": {} } }],
      [
        "limited",
        { _index: 625, title: {}, body: { "contributing.html": {}, "license.html": {} } },
      ],
      ["links", { _index: 860, title: {}, body: { "index.html": {} } }],
      [
        "list",
        {
          _index: 400,
          title: {},
          body: {
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/UpdateBookDto.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "list.enum.ts",
        {
          _index: 820,
          title: {},
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      ["listen", { _index: 55, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["lists", { _index: 928, title: {}, body: { "index.html": {} } }],
      ["literal", { _index: 46, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "literary",
        { _index: 431, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      ["live", { _index: 861, title: {}, body: { "index.html": {} } }],
      [
        "localhost",
        { _index: 51, title: {}, body: { "interfaces/ApiOptions.html": {} } },
      ],
      [
        "log_label",
        {
          _index: 755,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "loginwithemailandpassword",
        {
          _index: 92,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
          },
        },
      ],
      [
        "loginwithemailandpassword(authdto",
        { _index: 94, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "loginwithemailandpassword(r",
        { _index: 196, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      ["look", { _index: 674, title: {}, body: { "contributing.html": {} } }],
      ["lot", { _index: 877, title: {}, body: { "index.html": {} } }],
      ["lowercase", { _index: 588, title: {}, body: { "classes/UserEntity.html": {} } }],
      ["m", { _index: 707, title: {}, body: { "contributing.html": {} } }],
      [
        "make",
        { _index: 603, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "makedir",
        {
          _index: 763,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "makedir(path",
        { _index: 842, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["manage", { _index: 686, title: {}, body: { "contributing.html": {} } }],
      [
        "managed",
        { _index: 150, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      ["many", { _index: 985, title: {}, body: { "index.html": {} } }],
      ["match", { _index: 613, title: {}, body: { "contributing.html": {} } }],
      ["matches", { _index: 669, title: {}, body: { "contributing.html": {} } }],
      [
        "matching",
        {
          _index: 66,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "modules/AuthModule.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "contributing.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["maxage", { _index: 32, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "maxlength",
        {
          _index: 249,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      ["means", { _index: 968, title: {}, body: { "index.html": {} } }],
      [
        "measure",
        { _index: 1097, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["merchantability", { _index: 1053, title: {}, body: { "license.html": {} } }],
      ["merge", { _index: 1031, title: {}, body: { "license.html": {} } }],
      [
        "merit.'})@isstring({message",
        { _index: 432, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      [
        "message",
        {
          _index: 127,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      ["messages", { _index: 980, title: {}, body: { "index.html": {} } }],
      ["metadata", { _index: 804, title: {}, body: { "dependencies.html": {} } }],
      [
        "methods",
        {
          _index: 89,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/ConfigService.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "middleware",
        {
          _index: 17,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["min", { _index: 323, title: {}, body: { "classes/BookEntity.html": {} } }],
      ["mind", { _index: 1116, title: {}, body: { "miscellaneous/variables.html": {} } }],
      [
        "minlength",
        {
          _index: 252,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "miscellaneous",
        {
          _index: 815,
          title: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "mit",
        { _index: 1006, title: {}, body: { "index.html": {}, "license.html": {} } },
      ],
      ["mode", { _index: 943, title: {}, body: { "index.html": {} } }],
      [
        "model",
        {
          _index: 271,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      ["modify", { _index: 1030, title: {}, body: { "license.html": {} } }],
      [
        "module",
        {
          _index: 67,
          title: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
          },
          body: {},
        },
      ],
      [
        "modules",
        {
          _index: 69,
          title: { "modules.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["mold", { _index: 1117, title: {}, body: { "miscellaneous/variables.html": {} } }],
      ["mongodb", { _index: 955, title: {}, body: { "index.html": {} } }],
      [
        "mongoose",
        { _index: 796, title: {}, body: { "dependencies.html": {}, "index.html": {} } },
      ],
      ["more", { _index: 897, title: {}, body: { "index.html": {} } }],
      ["multer", { _index: 798, title: {}, body: { "dependencies.html": {} } }],
      [
        "name",
        {
          _index: 108,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["nestjs", { _index: 951, title: {}, body: { "index.html": {} } }],
      ["nestjs/common", { _index: 772, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/config", { _index: 774, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/core", { _index: 776, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/jwt", { _index: 777, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/mongoose", { _index: 778, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/passport", { _index: 780, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/platform", { _index: 781, title: {}, body: { "dependencies.html": {} } }],
      ["nestjs/swagger", { _index: 782, title: {}, body: { "dependencies.html": {} } }],
      [
        "new",
        {
          _index: 561,
          title: {},
          body: {
            "classes/UpdateUserDto.html": {},
            "contributing.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      ["newwish", { _index: 557, title: {}, body: { "classes/UpdateUserDto.html": {} } }],
      ["node", { _index: 688, title: {}, body: { "contributing.html": {} } }],
      ["noninfringement", { _index: 1057, title: {}, body: { "license.html": {} } }],
      ["notice", { _index: 1044, title: {}, body: { "license.html": {} } }],
      [
        "novels",
        { _index: 430, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      ["npm", { _index: 687, title: {}, body: { "contributing.html": {} } }],
      [
        "null",
        {
          _index: 243,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "number",
        {
          _index: 52,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "classes/BookEntity.html": {},
            "classes/CreateBookDto.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "number!'})@isdefined({message",
        { _index: 426, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "number!'})@isoptional",
        { _index: 552, title: {}, body: { "classes/UpdateBookDto.html": {} } },
      ],
      [
        "object",
        {
          _index: 290,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "classes/ProcessFile.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "objectid",
        {
          _index: 255,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      ["obtaining", { _index: 1021, title: {}, body: { "license.html": {} } }],
      ["occurrences", { _index: 912, title: {}, body: { "index.html": {} } }],
      ["ongoing", { _index: 681, title: {}, body: { "contributing.html": {} } }],
      [
        "open",
        { _index: 604, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "openapiobject",
        { _index: 838, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["opinion", { _index: 941, title: {}, body: { "index.html": {} } }],
      [
        "optional",
        {
          _index: 20,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "controllers/AuthController.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "options",
        {
          _index: 64,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      [
        "optionssuccessstatus",
        { _index: 34, title: {}, body: { "interfaces/ApiOptions.html": {} } },
      ],
      [
        "origin",
        {
          _index: 31,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "contributing.html": {} },
        },
      ],
      ["otherwise", { _index: 1068, title: {}, body: { "license.html": {} } }],
      [
        "out",
        {
          _index: 82,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
            "license.html": {},
            "overview.html": {},
          },
        },
      ],
      ["output", { _index: 513, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["outrageous", { _index: 870, title: {}, body: { "index.html": {} } }],
      ["overall", { _index: 60, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "overlooked",
        { _index: 1107, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "overview",
        { _index: 1074, title: { "overview.html": {} }, body: { "overview.html": {} } },
      ],
      [
        "package",
        {
          _index: 624,
          title: { "dependencies.html": {} },
          body: { "contributing.html": {} },
        },
      ],
      ["packagesyarn", { _index: 696, title: {}, body: { "contributing.html": {} } }],
      [
        "page",
        {
          _index: 63,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/SwaggerOptions.html": {},
            "index.html": {},
          },
        },
      ],
      ["pages", { _index: 1012, title: {}, body: { "index.html": {} } }],
      [
        "parameters",
        {
          _index: 107,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "parent",
        {
          _index: 354,
          title: {},
          body: {
            "classes/CategoryEntity.html": {},
            "classes/CreateCategoryDto.html": {},
          },
        },
      ],
      ["part", { _index: 904, title: {}, body: { "index.html": {} } }],
      [
        "partial",
        {
          _index: 274,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      ["participate", { _index: 987, title: {}, body: { "index.html": {} } }],
      ["particular", { _index: 1055, title: {}, body: { "license.html": {} } }],
      [
        "passowrd",
        {
          _index: 134,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      ["passport", { _index: 800, title: {}, body: { "dependencies.html": {} } }],
      ["passportjs", { _index: 957, title: {}, body: { "index.html": {} } }],
      [
        "password",
        {
          _index: 123,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateUserDto.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "password123'})@isdefined({message",
        {
          _index: 132,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      [
        "passwords",
        { _index: 166, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "path",
        {
          _index: 59,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/ProcessFile.html": {},
            "classes/UpdateBookDto.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "paulette",
        { _index: 406, title: {}, body: { "classes/CreateAuthorDto.html": {} } },
      ],
      [
        "payload",
        { _index: 502, title: {}, body: { "injectables/JwtStrategy.html": {} } },
      ],
      [
        "pdf",
        {
          _index: 932,
          title: {},
          body: { "index.html": {}, "miscellaneous/typealiases.html": {} },
        },
      ],
      [
        "people",
        {
          _index: 878,
          title: {},
          body: { "index.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      ["pepper", { _index: 152, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["per", { _index: 179, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["performance", { _index: 917, title: {}, body: { "index.html": {} } }],
      ["permission", { _index: 1016, title: {}, body: { "license.html": {} } }],
      ["permit", { _index: 1038, title: {}, body: { "license.html": {} } }],
      ["person", { _index: 1020, title: {}, body: { "license.html": {} } }],
      ["persons", { _index: 1039, title: {}, body: { "license.html": {} } }],
      ["picking", { _index: 935, title: {}, body: { "index.html": {} } }],
      ["place", { _index: 608, title: {}, body: { "contributing.html": {} } }],
      [
        "placed",
        { _index: 490, title: {}, body: { "interfaces/IProcessFile.html": {} } },
      ],
      ["planned", { _index: 679, title: {}, body: { "contributing.html": {} } }],
      ["plans", { _index: 677, title: {}, body: { "contributing.html": {} } }],
      ["please", { _index: 994, title: {}, body: { "index.html": {} } }],
      [
        "png",
        { _index: 1089, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      ["point", { _index: 876, title: {}, body: { "index.html": {} } }],
      ["policies", { _index: 638, title: {}, body: { "contributing.html": {} } }],
      [
        "port",
        {
          _index: 24,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      ["portions", { _index: 1048, title: {}, body: { "license.html": {} } }],
      [
        "positive",
        {
          _index: 425,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "classes/UpdateBookDto.html": {},
            "contributing.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "possible",
        {
          _index: 530,
          title: {},
          body: { "interfaces/RuntimeSetismConfig.html": {}, "contributing.html": {} },
        },
      ],
      ["pr", { _index: 664, title: {}, body: { "contributing.html": {} } }],
      ["prefix", { _index: 25, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["prerequisites", { _index: 683, title: {}, body: { "contributing.html": {} } }],
      ["prettier", { _index: 967, title: {}, body: { "index.html": {} } }],
      ["prices", { _index: 872, title: {}, body: { "index.html": {} } }],
      [
        "private",
        {
          _index: 189,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/ConfigService.html": {},
            "classes/EntityRepository.html": {},
            "classes/ProcessFile.html": {},
            "injectables/UserRepository.html": {},
            "miscellaneous/enumerations.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "process_file",
        { _index: 1121, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "processavatarupload",
        { _index: 294, title: {}, body: { "injectables/AuthorService.html": {} } },
      ],
      [
        "processavatarupload(file",
        { _index: 297, title: {}, body: { "injectables/AuthorService.html": {} } },
      ],
      [
        "processed",
        {
          _index: 486,
          title: {},
          body: { "interfaces/IProcessFile.html": {}, "classes/ProcessFile.html": {} },
        },
      ],
      [
        "processfile",
        {
          _index: 503,
          title: { "classes/ProcessFile.html": {} },
          body: { "classes/ProcessFile.html": {}, "coverage.html": {} },
        },
      ],
      [
        "processfileexttype",
        {
          _index: 478,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "classes/ProcessFile.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "processfiletype",
        {
          _index: 487,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "classes/ProcessFile.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "processuploadedfiles",
        { _index: 337, title: {}, body: { "injectables/BookService.html": {} } },
      ],
      [
        "processuploadedfiles(f",
        { _index: 340, title: {}, body: { "injectables/BookService.html": {} } },
      ],
      ["product", { _index: 628, title: {}, body: { "contributing.html": {} } }],
      [
        "production",
        { _index: 822, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      ["productive", { _index: 644, title: {}, body: { "contributing.html": {} } }],
      ["profile", { _index: 930, title: {}, body: { "index.html": {} } }],
      [
        "project",
        { _index: 621, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "projection",
        {
          _index: 282,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "promise",
        {
          _index: 276,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "classes/ProcessFile.html": {},
            "injectables/UserRepository.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "prop",
        {
          _index: 256,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "prop(['createreadinglistdto",
        { _index: 586, title: {}, body: { "classes/UserEntity.html": {} } },
      ],
      [
        "prop({default",
        { _index: 583, title: {}, body: { "classes/UserEntity.html": {} } },
      ],
      [
        "prop({require",
        { _index: 585, title: {}, body: { "classes/UserEntity.html": {} } },
      ],
      [
        "prop({required",
        {
          _index: 244,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      ["prop({type", { _index: 584, title: {}, body: { "classes/UserEntity.html": {} } }],
      [
        "properties",
        {
          _index: 19,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "classes/ProcessFile.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      ["proposed", { _index: 981, title: {}, body: { "index.html": {} } }],
      ["provide", { _index: 883, title: {}, body: { "index.html": {} } }],
      ["provided", { _index: 1049, title: {}, body: { "license.html": {} } }],
      [
        "providers",
        {
          _index: 146,
          title: {},
          body: {
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
          },
        },
      ],
      ["provides", { _index: 868, title: {}, body: { "index.html": {} } }],
      ["prs", { _index: 713, title: {}, body: { "contributing.html": {} } }],
      [
        "public",
        {
          _index: 90,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/enumerations.html": {},
            "index.html": {},
          },
        },
      ],
      ["publish", { _index: 1032, title: {}, body: { "license.html": {} } }],
      [
        "publisheddate",
        {
          _index: 313,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/UpdateBookDto.html": {} },
        },
      ],
      [
        "publisher",
        {
          _index: 314,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "classes/CreateBookDto.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      ["pull", { _index: 641, title: {}, body: { "contributing.html": {} } }],
      ["purpose", { _index: 1056, title: {}, body: { "license.html": {} } }],
      ["push", { _index: 710, title: {}, body: { "contributing.html": {} } }],
      ["quick", { _index: 859, title: {}, body: { "index.html": {} } }],
      ["r", { _index: 197, title: {}, body: { "injectables/AuthService.html": {} } }],
      [
        "rawname",
        { _index: 848, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["read", { _index: 852, title: {}, body: { "index.html": {} } }],
      [
        "reader",
        { _index: 829, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      ["readers", { _index: 938, title: {}, body: { "index.html": {} } }],
      [
        "readfile",
        {
          _index: 764,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "readfile(path",
        { _index: 844, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["reading", { _index: 885, title: {}, body: { "index.html": {} } }],
      [
        "readinglist",
        { _index: 582, title: {}, body: { "classes/UserEntity.html": {} } },
      ],
      [
        "readinglistkind",
        {
          _index: 818,
          title: {},
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "readinglisttype",
        {
          _index: 447,
          title: {},
          body: {
            "classes/CreateReadingListDto.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "readonly",
        {
          _index: 241,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "classes/BaseEntitySchema.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/ConfigService.html": {},
            "classes/EntityRepository.html": {},
            "classes/ProcessFile.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "record",
        {
          _index: 99,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "injectables/AuthorRepository.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "ref",
        {
          _index: 320,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/CategoryEntity.html": {} },
        },
      ],
      [
        "references",
        {
          _index: 411,
          title: {},
          body: { "classes/CreateBookDto.html": {}, "classes/UpdateBookDto.html": {} },
        },
      ],
      ["reflect", { _index: 803, title: {}, body: { "dependencies.html": {} } }],
      ["reflector", { _index: 525, title: {}, body: { "guards/RolesGuard.html": {} } }],
      [
        "refreshed",
        { _index: 175, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      ["relative", { _index: 518, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["relaxed", { _index: 898, title: {}, body: { "index.html": {} } }],
      ["release", { _index: 423, title: {}, body: { "classes/CreateBookDto.html": {} } }],
      [
        "releasedate",
        {
          _index: 315,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/CreateBookDto.html": {} },
        },
      ],
      [
        "reminds",
        { _index: 1100, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "remove",
        {
          _index: 209,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "remove(id",
        {
          _index: 228,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      ["repo", { _index: 694, title: {}, body: { "contributing.html": {} } }],
      ["reporting", { _index: 646, title: {}, body: { "contributing.html": {} } }],
      [
        "request",
        { _index: 712, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "requests",
        { _index: 642, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["require", { _index: 684, title: {}, body: { "contributing.html": {} } }],
      [
        "required",
        {
          _index: 61,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "reset",
        {
          _index: 81,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "resizeandsave",
        { _index: 507, title: {}, body: { "classes/ProcessFile.html": {} } },
      ],
      [
        "resizeandsave(undefined",
        { _index: 515, title: {}, body: { "classes/ProcessFile.html": {} } },
      ],
      ["resized", { _index: 517, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["respectful", { _index: 645, title: {}, body: { "contributing.html": {} } }],
      [
        "rest",
        {
          _index: 10,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
          },
        },
      ],
      ["restriction", { _index: 1027, title: {}, body: { "license.html": {} } }],
      [
        "results",
        {
          _index: 65,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "modules/AuthModule.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "modules/AuthorModule.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "modules/BookModule.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "modules/CategoryModule.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "modules/ConfigModule.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtAuthGuard.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateAuthorDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateCategoryDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "contributing.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "returned.'})@apibadrequestresponse({description",
        { _index: 101, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "returned.'})@apinotfoundresponse({description",
        {
          _index: 221,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "returns",
        {
          _index: 109,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/ConfigService.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "controllers/UserController.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "review",
        {
          _index: 545,
          title: {},
          body: {
            "classes/UpdateBookDto.html": {},
            "contributing.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "reviews",
        {
          _index: 316,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "classes/UpdateBookDto.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "right",
        {
          _index: 919,
          title: {},
          body: { "index.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      ["rights", { _index: 1029, title: {}, body: { "license.html": {} } }],
      ["rimraf", { _index: 806, title: {}, body: { "dependencies.html": {} } }],
      [
        "roadmap",
        { _index: 676, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "role",
        {
          _index: 200,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/UserEntity.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "role.admin",
        {
          _index: 216,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
          },
        },
      ],
      [
        "role.super_admin)@useguards(jwtauthguard",
        {
          _index: 217,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
          },
        },
      ],
      [
        "roles",
        { _index: 1122, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "roles_key",
        {
          _index: 727,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "rolesguard",
        {
          _index: 520,
          title: { "guards/RolesGuard.html": {} },
          body: { "guards/RolesGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "rolesguard)@delete(':id",
        {
          _index: 230,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
          },
        },
      ],
      [
        "rolesguard)@get",
        { _index: 574, title: {}, body: { "controllers/UserController.html": {} } },
      ],
      [
        "rolesguard)@patch(':id",
        {
          _index: 233,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
          },
        },
      ],
      [
        "rolesguard)@post",
        { _index: 349, title: {}, body: { "controllers/CategoryController.html": {} } },
      ],
      [
        "rolesguard)@useinterceptors(undefined)@post",
        { _index: 218, title: {}, body: { "controllers/AuthorController.html": {} } },
      ],
      [
        "rolesguard)@useinterceptors(undefined)@post('create",
        { _index: 306, title: {}, body: { "controllers/BookController.html": {} } },
      ],
      [
        "roletype",
        {
          _index: 201,
          title: {},
          body: {
            "injectables/AuthService.html": {},
            "classes/UserEntity.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "rules",
        { _index: 630, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "run",
        { _index: 697, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      [
        "runtimesetismconfig",
        {
          _index: 380,
          title: { "interfaces/RuntimeSetismConfig.html": {} },
          body: {
            "classes/ConfigService.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["rxjs", { _index: 808, title: {}, body: { "dependencies.html": {} } }],
      [
        "saved",
        {
          _index: 483,
          title: {},
          body: { "interfaces/IProcessFile.html": {}, "classes/ProcessFile.html": {} },
        },
      ],
      ["savefile", { _index: 508, title: {}, body: { "classes/ProcessFile.html": {} } }],
      ["saving", { _index: 925, title: {}, body: { "index.html": {} } }],
      [
        "schemafactory.createforclass(authorentity",
        { _index: 1096, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "schemafactory.createforclass(bookentity",
        { _index: 1119, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "schemafactory.createforclass(categoryentity",
        { _index: 1120, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "schemafactory.createforclass(userentity",
        { _index: 1124, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["scope", { _index: 626, title: {}, body: { "contributing.html": {} } }],
      ["search", { _index: 944, title: {}, body: { "index.html": {} } }],
      ["secret", { _index: 156, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      [
        "security",
        { _index: 164, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "see",
        {
          _index: 42,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "contributing.html": {},
            "index.html": {},
          },
        },
      ],
      ["seen", { _index: 866, title: {}, body: { "index.html": {} } }],
      ["self", { _index: 908, title: {}, body: { "index.html": {} } }],
      ["sell", { _index: 1036, title: {}, body: { "license.html": {} } }],
      ["server", { _index: 41, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      ["serveryarn", { _index: 698, title: {}, body: { "contributing.html": {} } }],
      ["service", { _index: 882, title: {}, body: { "index.html": {} } }],
      ["services", { _index: 867, title: {}, body: { "index.html": {} } }],
      [
        "set",
        {
          _index: 39,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "index.html": {} },
        },
      ],
      [
        "setdefaultconfig",
        { _index: 373, title: {}, body: { "classes/ConfigService.html": {} } },
      ],
      ["setism", { _index: 9, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "setismconfig",
        { _index: 533, title: {}, body: { "interfaces/RuntimeSetismConfig.html": {} } },
      ],
      [
        "setmetadata(roles_key",
        { _index: 1123, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["sets", { _index: 155, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      [
        "settings",
        { _index: 535, title: {}, body: { "interfaces/RuntimeSetismConfig.html": {} } },
      ],
      ["shall", { _index: 1045, title: {}, body: { "license.html": {} } }],
      ["share", { _index: 929, title: {}, body: { "index.html": {} } }],
      ["sharp", { _index: 810, title: {}, body: { "dependencies.html": {} } }],
      [
        "sharp.resizeoptions",
        { _index: 496, title: {}, body: { "interfaces/IResizeImageArgs.html": {} } },
      ],
      [
        "sharpexttype",
        { _index: 1086, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      ["shields", { _index: 1009, title: {}, body: { "index.html": {} } }],
      ["short", { _index: 715, title: {}, body: { "contributing.html": {} } }],
      ["show", { _index: 597, title: {}, body: { "injectables/UserService.html": {} } }],
      [
        "show(id",
        { _index: 598, title: {}, body: { "injectables/UserService.html": {} } },
      ],
      [
        "signupwithemailandpassword",
        {
          _index: 93,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
          },
        },
      ],
      [
        "signupwithemailandpassword(createuserdto",
        { _index: 111, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "signupwithemailandpassword(undefined",
        { _index: 198, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      [
        "signuser",
        { _index: 190, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      [
        "signuser(id",
        { _index: 199, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      ["software", { _index: 1023, title: {}, body: { "license.html": {} } }],
      ["soon", { _index: 667, title: {}, body: { "contributing.html": {} } }],
      [
        "source",
        {
          _index: 544,
          title: {},
          body: {
            "classes/UpdateBookDto.html": {},
            "contributing.html": {},
            "index.html": {},
          },
        },
      ],
      ["span", { _index: 178, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["specification", { _index: 1001, title: {}, body: { "index.html": {} } }],
      ["spoken", { _index: 913, title: {}, body: { "index.html": {} } }],
      ["src", { _index: 963, title: {}, body: { "index.html": {} } }],
      [
        "src/.../author.controller.ts",
        { _index: 1093, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "src/.../author.entity.ts",
        {
          _index: 1080,
          title: {},
          body: {
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../book.entity.ts",
        {
          _index: 1082,
          title: {},
          body: {
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../category.controller.ts",
        { _index: 1094, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "src/.../category.entity.ts",
        {
          _index: 1084,
          title: {},
          body: {
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../config.interface.ts",
        { _index: 817, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      [
        "src/.../create",
        { _index: 1092, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "src/.../file",
        { _index: 834, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "src/.../formatters.ts",
        { _index: 835, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "src/.../main.ts",
        {
          _index: 832,
          title: {},
          body: {
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../process",
        {
          _index: 1085,
          title: {},
          body: {
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../reading",
        {
          _index: 819,
          title: {},
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "src/.../role.decorator.ts",
        { _index: 1095, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "src/.../role.enum.ts",
        {
          _index: 821,
          title: {},
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "src/.../swagger.ts",
        { _index: 833, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      [
        "src/.../user.entity.ts",
        {
          _index: 1088,
          title: {},
          body: {
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/app.module.ts",
        { _index: 83, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "src/auth/auth.controller.ts",
        {
          _index: 88,
          title: {},
          body: { "controllers/AuthController.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/auth.module.ts",
        { _index: 145, title: {}, body: { "modules/AuthModule.html": {} } },
      ],
      [
        "src/auth/auth.service.ts",
        {
          _index: 188,
          title: {},
          body: { "injectables/AuthService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/decorators/role.decorator.ts",
        {
          _index: 725,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/auth/dto/auth.dto.ts",
        {
          _index: 121,
          title: {},
          body: { "classes/AuthDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/dto/create",
        {
          _index: 451,
          title: {},
          body: { "classes/CreateUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/guards/jwt.guard.ts",
        {
          _index: 498,
          title: {},
          body: { "injectables/JwtAuthGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/guards/role.guard.ts",
        {
          _index: 522,
          title: {},
          body: { "guards/RolesGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/auth/role.enum.ts",
        {
          _index: 826,
          title: {},
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "src/auth/strategies/jwt.strategy.ts",
        {
          _index: 499,
          title: {},
          body: { "injectables/JwtStrategy.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/author/author.controller.ts",
        {
          _index: 207,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/author/author.module.ts",
        { _index: 261, title: {}, body: { "modules/AuthorModule.html": {} } },
      ],
      [
        "src/author/author.service.ts",
        {
          _index: 292,
          title: {},
          body: { "injectables/AuthorService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/author/dto/create",
        {
          _index: 393,
          title: {},
          body: { "classes/CreateAuthorDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/author/dto/update",
        {
          _index: 542,
          title: {},
          body: { "classes/UpdateAuthorDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/author/models/author.entity.ts",
        {
          _index: 235,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "coverage.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/author/models/author.repository.ts",
        {
          _index: 262,
          title: {},
          body: { "injectables/AuthorRepository.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/book/book.controller.ts",
        {
          _index: 301,
          title: {},
          body: { "controllers/BookController.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/book/book.module.ts",
        { _index: 332, title: {}, body: { "modules/BookModule.html": {} } },
      ],
      [
        "src/book/book.service.ts",
        {
          _index: 336,
          title: {},
          body: { "injectables/BookService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/book/dto/create",
        {
          _index: 408,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/book/dto/update",
        {
          _index: 543,
          title: {},
          body: { "classes/UpdateBookDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/book/dto/upload",
        {
          _index: 566,
          title: {},
          body: { "classes/UploadBookDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/book/models/book.entity.ts",
        {
          _index: 310,
          title: {},
          body: {
            "classes/BookEntity.html": {},
            "coverage.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/book/models/book.repository.ts",
        {
          _index: 333,
          title: {},
          body: { "injectables/BookRepository.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/category/category.controller.ts",
        {
          _index: 344,
          title: {},
          body: {
            "controllers/CategoryController.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/category/category.module.ts",
        { _index: 360, title: {}, body: { "modules/CategoryModule.html": {} } },
      ],
      [
        "src/category/category.service.ts",
        {
          _index: 364,
          title: {},
          body: { "injectables/CategoryService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/category/dto/create",
        {
          _index: 427,
          title: {},
          body: { "classes/CreateCategoryDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/category/dto/update",
        {
          _index: 553,
          title: {},
          body: { "classes/UpdateCategoryDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/category/models/category.entity.ts",
        {
          _index: 353,
          title: {},
          body: {
            "classes/CategoryEntity.html": {},
            "coverage.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/category/models/category.repository.ts",
        {
          _index: 361,
          title: {},
          body: { "injectables/CategoryRepository.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/config/config.interface.ts",
        {
          _index: 6,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "interfaces/ConnectionOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "coverage.html": {},
            "miscellaneous/enumerations.html": {},
          },
        },
      ],
      [
        "src/config/config.module.ts",
        { _index: 370, title: {}, body: { "modules/ConfigModule.html": {} } },
      ],
      [
        "src/config/config.service.ts",
        {
          _index: 371,
          title: {},
          body: { "classes/ConfigService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/db/base.schema.ts",
        {
          _index: 299,
          title: {},
          body: { "classes/BaseEntitySchema.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/db/db.module.ts",
        { _index: 463, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "src/db/db.service.ts",
        {
          _index: 464,
          title: {},
          body: { "injectables/DatabaseService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/db/entity.repository.ts",
        {
          _index: 467,
          title: {},
          body: { "classes/EntityRepository.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/main.ts",
        {
          _index: 752,
          title: {},
          body: {
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/swagger.ts",
        {
          _index: 756,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/user/dto/readinglist",
        {
          _index: 439,
          title: {},
          body: { "classes/CreateReadingListDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/user/dto/update",
        {
          _index: 555,
          title: {},
          body: { "classes/UpdateUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/user/models/user.entity.ts",
        {
          _index: 578,
          title: {},
          body: {
            "classes/UserEntity.html": {},
            "coverage.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/user/models/user.repository.ts",
        {
          _index: 593,
          title: {},
          body: { "injectables/UserRepository.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/user/reading",
        {
          _index: 824,
          title: {},
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/typealiases.html": {},
          },
        },
      ],
      [
        "src/user/user.controller.ts",
        {
          _index: 568,
          title: {},
          body: { "controllers/UserController.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/user/user.module.ts",
        { _index: 592, title: {}, body: { "modules/UserModule.html": {} } },
      ],
      [
        "src/user/user.service.ts",
        {
          _index: 596,
          title: {},
          body: { "injectables/UserService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/utils/file",
        {
          _index: 760,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/utils/formatters.ts",
        {
          _index: 766,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/utils/process",
        {
          _index: 471,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "classes/ProcessFile.html": {},
            "coverage.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "srccoverpath",
        {
          _index: 317,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/UpdateBookDto.html": {} },
        },
      ],
      [
        "srcpath",
        {
          _index: 318,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/UpdateBookDto.html": {} },
        },
      ],
      ["standards", { _index: 616, title: {}, body: { "contributing.html": {} } }],
      ["start:dev", { _index: 699, title: {}, body: { "contributing.html": {} } }],
      [
        "started",
        {
          _index: 600,
          title: { "contributing.html": {}, "index.html": {}, "license.html": {} },
          body: { "contributing.html": {} },
        },
      ],
      ["statements", { _index: 722, title: {}, body: { "coverage.html": {} } }],
      ["stay", { _index: 643, title: {}, body: { "contributing.html": {} } }],
      ["stimulates", { _index: 903, title: {}, body: { "index.html": {} } }],
      ["stopping", { _index: 875, title: {}, body: { "index.html": {} } }],
      ["storage", { _index: 956, title: {}, body: { "index.html": {} } }],
      [
        "storeuserrecord",
        { _index: 191, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      [
        "storeuserrecord(email",
        { _index: 203, title: {}, body: { "injectables/AuthService.html": {} } },
      ],
      [
        "string",
        {
          _index: 49,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "classes/ProcessFile.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "string!'})@isdefined({message",
        {
          _index: 405,
          title: {},
          body: { "classes/CreateAuthorDto.html": {}, "classes/CreateBookDto.html": {} },
        },
      ],
      [
        "string!'})@isoptional",
        { _index: 547, title: {}, body: { "classes/UpdateBookDto.html": {} } },
      ],
      [
        "string!'})@minlength(20",
        { _index: 433, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      [
        "string!'})@minlength(3",
        { _index: 435, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      [
        "string!'})@minlength(5",
        { _index: 420, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      [
        "string!'})@minlength(54",
        { _index: 413, title: {}, body: { "classes/CreateBookDto.html": {} } },
      ],
      ["structure", { _index: 959, title: {}, body: { "index.html": {} } }],
      [
        "style",
        { _index: 615, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["sub", { _index: 488, title: {}, body: { "interfaces/IProcessFile.html": {} } }],
      [
        "subdir",
        {
          _index: 477,
          title: {},
          body: { "interfaces/IProcessFile.html": {}, "classes/ProcessFile.html": {} },
        },
      ],
      ["subject", { _index: 1041, title: {}, body: { "license.html": {} } }],
      ["sublicense", { _index: 1034, title: {}, body: { "license.html": {} } }],
      ["submit", { _index: 988, title: {}, body: { "index.html": {} } }],
      ["subscription", { _index: 871, title: {}, body: { "index.html": {} } }],
      ["substantial", { _index: 1047, title: {}, body: { "license.html": {} } }],
      [
        "successfully",
        {
          _index: 100,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      ["such", { _index: 606, title: {}, body: { "contributing.html": {} } }],
      ["summury", { _index: 716, title: {}, body: { "contributing.html": {} } }],
      [
        "super_admin",
        { _index: 827, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      [
        "superadmin",
        {
          _index: 170,
          title: {},
          body: {
            "interfaces/AuthOptions.html": {},
            "interfaces/SuperadminCredentials.html": {},
          },
        },
      ],
      [
        "superadmincredentials",
        {
          _index: 153,
          title: { "interfaces/SuperadminCredentials.html": {} },
          body: {
            "interfaces/AuthOptions.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["support", { _index: 1071, title: {}, body: { "modules.html": {} } }],
      ["sure", { _index: 657, title: {}, body: { "contributing.html": {} } }],
      ["surveyed", { _index: 893, title: {}, body: { "index.html": {} } }],
      ["svg", { _index: 1072, title: {}, body: { "modules.html": {} } }],
      ["svr.dekoo.tk", { _index: 865, title: {}, body: { "index.html": {} } }],
      [
        "swagger",
        {
          _index: 26,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "dependencies.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "swaggeroptions",
        {
          _index: 539,
          title: { "interfaces/SwaggerOptions.html": {} },
          body: { "interfaces/SwaggerOptions.html": {}, "coverage.html": {} },
        },
      ],
      ["system", { _index: 936, title: {}, body: { "index.html": {} } }],
      [
        "system.ts",
        {
          _index: 761,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      ["table", { _index: 771, title: {}, body: { "coverage.html": {} } }],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 770, title: {}, body: { "coverage.html": {} } },
      ],
      ["technical", { _index: 652, title: {}, body: { "contributing.html": {} } }],
      ["technologies", { _index: 950, title: {}, body: { "index.html": {} } }],
      [
        "template",
        {
          _index: 45,
          title: {},
          body: { "interfaces/ApiOptions.html": {}, "contributing.html": {} },
        },
      ],
      [
        "test",
        { _index: 823, title: {}, body: { "miscellaneous/enumerations.html": {} } },
      ],
      [
        "test@email.com'})@isemail",
        {
          _index: 126,
          title: {},
          body: { "classes/AuthDto.html": {}, "classes/CreateUserDto.html": {} },
        },
      ],
      [
        "testconnectionuri",
        { _index: 389, title: {}, body: { "interfaces/ConnectionOptions.html": {} } },
      ],
      [
        "testing",
        { _index: 392, title: {}, body: { "interfaces/ConnectionOptions.html": {} } },
      ],
      ["tests", { _index: 964, title: {}, body: { "index.html": {} } }],
      ["testscode", { _index: 966, title: {}, body: { "index.html": {} } }],
      [
        "things",
        { _index: 1102, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["think", { _index: 874, title: {}, body: { "index.html": {} } }],
      ["time", { _index: 173, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      [
        "title",
        { _index: 540, title: {}, body: { "interfaces/SwaggerOptions.html": {} } },
      ],
      ["titles", { _index: 886, title: {}, body: { "index.html": {} } }],
      ["token", { _index: 162, title: {}, body: { "interfaces/AuthOptions.html": {} } }],
      ["tort", { _index: 1067, title: {}, body: { "license.html": {} } }],
      ["total", { _index: 550, title: {}, body: { "classes/UpdateBookDto.html": {} } }],
      [
        "totalreviews",
        {
          _index: 319,
          title: {},
          body: { "classes/BookEntity.html": {}, "classes/UpdateBookDto.html": {} },
        },
      ],
      ["transformer", { _index: 786, title: {}, body: { "dependencies.html": {} } }],
      [
        "trim",
        {
          _index: 247,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "true",
        {
          _index: 248,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UserEntity.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "true})@isdefined",
        { _index: 443, title: {}, body: { "classes/CreateReadingListDto.html": {} } },
      ],
      [
        "type",
        {
          _index: 38,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "controllers/AuthController.html": {},
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthService.html": {},
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/AuthorService.html": {},
            "classes/BaseEntitySchema.html": {},
            "controllers/BookController.html": {},
            "classes/BookEntity.html": {},
            "injectables/BookRepository.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "classes/CategoryEntity.html": {},
            "injectables/CategoryRepository.html": {},
            "injectables/CategoryService.html": {},
            "classes/ConfigService.html": {},
            "interfaces/ConnectionOptions.html": {},
            "classes/CreateAuthorDto.html": {},
            "classes/CreateBookDto.html": {},
            "classes/CreateCategoryDto.html": {},
            "classes/CreateReadingListDto.html": {},
            "classes/CreateUserDto.html": {},
            "injectables/DatabaseService.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "interfaces/IResizeImageArgs.html": {},
            "injectables/JwtStrategy.html": {},
            "classes/ProcessFile.html": {},
            "guards/RolesGuard.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "interfaces/SwaggerOptions.html": {},
            "classes/UpdateBookDto.html": {},
            "classes/UpdateUserDto.html": {},
            "classes/UploadBookDto.html": {},
            "controllers/UserController.html": {},
            "classes/UserEntity.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/typealiases.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "typealiases",
        { _index: 1077, title: { "miscellaneous/typealiases.html": {} }, body: {} },
      ],
      ["typescript", { _index: 949, title: {}, body: { "index.html": {} } }],
      ["typical", { _index: 620, title: {}, body: { "contributing.html": {} } }],
      ["u", { _index: 711, title: {}, body: { "contributing.html": {} } }],
      ["ui", { _index: 812, title: {}, body: { "dependencies.html": {} } }],
      [
        "unauthorized",
        { _index: 104, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      [
        "undefined",
        {
          _index: 246,
          title: {},
          body: {
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "undefined})@isoptional",
        { _index: 437, title: {}, body: { "classes/CreateCategoryDto.html": {} } },
      ],
      [
        "undefined})@isstring({each",
        {
          _index: 403,
          title: {},
          body: { "classes/CreateAuthorDto.html": {}, "classes/CreateBookDto.html": {} },
        },
      ],
      [
        "under",
        {
          _index: 491,
          title: {},
          body: {
            "interfaces/IProcessFile.html": {},
            "contributing.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "unique",
        {
          _index: 225,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "classes/AuthorEntity.html": {},
            "classes/BookEntity.html": {},
            "classes/CategoryEntity.html": {},
            "classes/UserEntity.html": {},
          },
        },
      ],
      [
        "unknown",
        {
          _index: 110,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "injectables/AuthService.html": {},
            "injectables/AuthorService.html": {},
            "injectables/BookService.html": {},
            "injectables/CategoryService.html": {},
            "injectables/JwtStrategy.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "unproductive",
        { _index: 1109, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["up", { _index: 976, title: {}, body: { "index.html": {} } }],
      [
        "update",
        {
          _index: 210,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "update(id",
        {
          _index: 231,
          title: {},
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
          },
        },
      ],
      [
        "updateauthordto",
        {
          _index: 232,
          title: { "classes/UpdateAuthorDto.html": {} },
          body: {
            "controllers/AuthorController.html": {},
            "injectables/AuthorService.html": {},
            "classes/UpdateAuthorDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "updatebookdto",
        {
          _index: 309,
          title: { "classes/UpdateBookDto.html": {} },
          body: {
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "classes/UpdateBookDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "updatecategorydto",
        {
          _index: 351,
          title: { "classes/UpdateCategoryDto.html": {} },
          body: {
            "controllers/CategoryController.html": {},
            "injectables/CategoryService.html": {},
            "classes/UpdateCategoryDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "updateentitydata",
        {
          _index: 287,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "updatequery",
        {
          _index: 288,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "updateuserdto",
        {
          _index: 554,
          title: { "classes/UpdateUserDto.html": {} },
          body: {
            "classes/UpdateUserDto.html": {},
            "controllers/UserController.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "uploadbookdto",
        {
          _index: 303,
          title: { "classes/UploadBookDto.html": {} },
          body: {
            "controllers/BookController.html": {},
            "injectables/BookService.html": {},
            "classes/UploadBookDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["upvote", { _index: 999, title: {}, body: { "index.html": {} } }],
      [
        "use",
        {
          _index: 637,
          title: {},
          body: { "contributing.html": {}, "index.html": {}, "license.html": {} },
        },
      ],
      [
        "used",
        {
          _index: 57,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "interfaces/RuntimeSetismConfig.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "contributing.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "user",
        {
          _index: 131,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UpdateUserDto.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "user.dto.ts",
        {
          _index: 452,
          title: {},
          body: {
            "classes/CreateUserDto.html": {},
            "classes/UpdateUserDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "usercontroller",
        {
          _index: 567,
          title: { "controllers/UserController.html": {} },
          body: {
            "controllers/UserController.html": {},
            "modules/UserModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "userdocument",
        { _index: 1087, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      [
        "userentity",
        {
          _index: 577,
          title: { "classes/UserEntity.html": {} },
          body: { "classes/UserEntity.html": {}, "coverage.html": {} },
        },
      ],
      [
        "userentityschema",
        {
          _index: 759,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "usermodel",
        { _index: 595, title: {}, body: { "injectables/UserRepository.html": {} } },
      ],
      [
        "usermodule",
        {
          _index: 79,
          title: { "modules/UserModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/UserModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "username",
        {
          _index: 558,
          title: {},
          body: { "classes/UpdateUserDto.html": {}, "classes/UserEntity.html": {} },
        },
      ],
      [
        "useroles",
        {
          _index: 729,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "userrepository",
        {
          _index: 144,
          title: { "injectables/UserRepository.html": {} },
          body: {
            "modules/AuthModule.html": {},
            "injectables/AuthService.html": {},
            "modules/UserModule.html": {},
            "injectables/UserRepository.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      ["users", { _index: 327, title: {}, body: { "classes/BookEntity.html": {} } }],
      [
        "userservice",
        {
          _index: 591,
          title: { "injectables/UserService.html": {} },
          body: {
            "modules/UserModule.html": {},
            "injectables/UserService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usestaticpath",
        { _index: 512, title: {}, body: { "classes/ProcessFile.html": {} } },
      ],
      [
        "usually",
        { _index: 1104, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      [
        "uuid",
        {
          _index: 482,
          title: {},
          body: { "interfaces/IProcessFile.html": {}, "dependencies.html": {} },
        },
      ],
      [
        "valid",
        {
          _index: 128,
          title: {},
          body: {
            "classes/AuthDto.html": {},
            "interfaces/AuthOptions.html": {},
            "classes/CreateUserDto.html": {},
            "classes/UpdateUserDto.html": {},
          },
        },
      ],
      [
        "validate",
        {
          _index: 374,
          title: {},
          body: { "classes/ConfigService.html": {}, "injectables/JwtStrategy.html": {} },
        },
      ],
      [
        "validate(payload",
        { _index: 501, title: {}, body: { "injectables/JwtStrategy.html": {} } },
      ],
      [
        "validating",
        { _index: 159, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "validation.'})@apiconflictresponse({description",
        {
          _index: 115,
          title: {},
          body: {
            "controllers/AuthController.html": {},
            "controllers/AuthorController.html": {},
            "controllers/BookController.html": {},
            "controllers/CategoryController.html": {},
            "controllers/UserController.html": {},
          },
        },
      ],
      [
        "validation.'})@apiunauthorizedresponse({description",
        { _index: 103, title: {}, body: { "controllers/AuthController.html": {} } },
      ],
      ["validator", { _index: 788, title: {}, body: { "dependencies.html": {} } }],
      [
        "value",
        {
          _index: 29,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "interfaces/AuthOptions.html": {},
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "interfaces/IProcessFile.html": {},
            "classes/ProcessFile.html": {},
            "interfaces/SuperadminCredentials.html": {},
            "injectables/UserRepository.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["variable", { _index: 726, title: {}, body: { "coverage.html": {} } }],
      [
        "variables",
        {
          _index: 1091,
          title: { "miscellaneous/variables.html": {} },
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["vendor", { _index: 961, title: {}, body: { "index.html": {} } }],
      ["vendure", { _index: 54, title: {}, body: { "interfaces/ApiOptions.html": {} } }],
      [
        "verification",
        { _index: 174, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "verificationtokenduration",
        { _index: 154, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "verified",
        { _index: 841, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["verify", { _index: 990, title: {}, body: { "index.html": {} } }],
      [
        "version",
        {
          _index: 417,
          title: {},
          body: {
            "classes/CreateBookDto.html": {},
            "interfaces/SwaggerOptions.html": {},
          },
        },
      ],
      ["versions", { _index: 689, title: {}, body: { "contributing.html": {} } }],
      ["virtual", { _index: 869, title: {}, body: { "index.html": {} } }],
      ["volta", { _index: 685, title: {}, body: { "contributing.html": {} } }],
      [
        "want",
        { _index: 670, title: {}, body: { "contributing.html": {}, "index.html": {} } },
      ],
      ["ward", { _index: 910, title: {}, body: { "index.html": {} } }],
      ["warranties", { _index: 1052, title: {}, body: { "license.html": {} } }],
      ["warranty", { _index: 1050, title: {}, body: { "license.html": {} } }],
      [
        "wasted",
        { _index: 1113, title: {}, body: { "miscellaneous/variables.html": {} } },
      ],
      ["ways", { _index: 986, title: {}, body: { "index.html": {} } }],
      ["we'll", { _index: 666, title: {}, body: { "contributing.html": {} } }],
      [
        "webp",
        { _index: 1090, title: {}, body: { "miscellaneous/typealiases.html": {} } },
      ],
      ["welcome", { _index: 612, title: {}, body: { "contributing.html": {} } }],
      [
        "well",
        {
          _index: 13,
          title: {},
          body: {
            "interfaces/ApiOptions.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["whatever", { _index: 970, title: {}, body: { "index.html": {} } }],
      ["whether", { _index: 1064, title: {}, body: { "license.html": {} } }],
      [
        "width",
        {
          _index: 495,
          title: {},
          body: {
            "interfaces/IResizeImageArgs.html": {},
            "classes/ProcessFile.html": {},
          },
        },
      ],
      ["window", { _index: 924, title: {}, body: { "index.html": {} } }],
      [
        "wishlist",
        {
          _index: 563,
          title: {},
          body: { "classes/UpdateUserDto.html": {}, "classes/UserEntity.html": {} },
        },
      ],
      [
        "without",
        {
          _index: 1026,
          title: {},
          body: { "license.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      ["work", { _index: 682, title: {}, body: { "contributing.html": {} } }],
      ["write", { _index: 969, title: {}, body: { "index.html": {} } }],
      [
        "writefile",
        {
          _index: 765,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/functions.html": {} },
        },
      ],
      [
        "writefile(path",
        { _index: 845, title: {}, body: { "miscellaneous/functions.html": {} } },
      ],
      ["yarn", { _index: 690, title: {}, body: { "contributing.html": {} } }],
      [
        "yes",
        {
          _index: 283,
          title: {},
          body: {
            "injectables/AuthorRepository.html": {},
            "injectables/BookRepository.html": {},
            "injectables/CategoryRepository.html": {},
            "classes/EntityRepository.html": {},
            "injectables/UserRepository.html": {},
          },
        },
      ],
      [
        "zeit/ms",
        { _index: 180, title: {}, body: { "interfaces/AuthOptions.html": {} } },
      ],
      [
        "zoom",
        {
          _index: 80,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "modules/AuthModule.html": {},
            "modules/AuthorModule.html": {},
            "modules/BookModule.html": {},
            "modules/CategoryModule.html": {},
            "modules/ConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/UserModule.html": {},
            "overview.html": {},
          },
        },
      ],
    ],
    pipeline: ["stemmer"],
  },
  store: {
    "interfaces/ApiOptions.html": {
      url: "interfaces/ApiOptions.html",
      title: "interface - ApiOptions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The ApiOptions define how the Setism REST APIs are exposed, as well as allowing the API layer\nto be extended with middleware.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            env\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hostname\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            swagger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cors:     CorsOptions\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : {\norigin: "*",\nmaxAge: 0,\noptionsSuccessStatus: 200,\nexposedHeaders: ["Authorization"]\n}\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     CorsOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the CORS handling for the server. See the express CORS docs.\n  origin: "*",\n  maxAge: 0,\n  optionsSuccessStatus: 200,\n  exposedHeaders: ["Authorization"]\n}\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        env\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        env:     template literal type\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : \'development\'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the environment of the server. If not set, the environment will be development.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hostname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hostname:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : \'\'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the hostname of the server. If not set, the server will be available on localhost.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 3000\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Which port the Vendure server should listen on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    API base prefix, used for both swagger server path, and overall API path\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        swagger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        swagger:         Required\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Required\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Swagger API Documentation page options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/AppModule.html": {
      url: "modules/AppModule.html",
      title: "module - AppModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthorModule\n\nAuthorModule\n\nAppModule -->\n\nAuthorModule->AppModule\n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            AuthorModule\n                        \n                        \n                            BookModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/AuthController.html": {
      url: "controllers/AuthController.html",
      title: "controller - AuthController",
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loginWithEmailAndPassword\n                            \n                            \n                                    Public\n                                    Async\n                                signUpWithEmailAndPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loginWithEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginWithEmailAndPassword(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: AuthDto})@ApiOkResponse({description: 'The record has been successfully returned.'})@ApiBadRequestResponse({description: 'The record has failed validation.'})@ApiUnauthorizedResponse({description: 'Unauthorized action.'})@ApiForbiddenResponse({description: 'Forbidden!'})@Post('signin')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signUpWithEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUpWithEmailAndPassword(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: CreateUserDto})@ApiCreatedResponse({description: 'The record has been successfully created.'})@ApiBadRequestResponse({description: 'The record has failed validation.'})@ApiConflictResponse({description: 'The record has an internal conflict.'})@ApiForbiddenResponse({description: 'Forbidden!'})@Post('signup')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/AuthDto.html": {
      url: "classes/AuthDto.html",
      title: "class - AuthDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'String', description: 'Email address', default: 'test@email.com'})@IsEmail({}, {message: 'Email address must be a valid email!'})@IsDefined({message: 'Email address must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'String', description: 'User password', default: 'password123'})@IsDefined({message: 'Password must not be empty!'})@MinLength(6, {message: 'Passowrd must have at least 6 characters!'})@MaxLength(32, {message: 'Password must be at most 32 characters!'})\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/AuthModule.html": {
      url: "modules/AuthModule.html",
      title: "module - AuthModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nAuthModule -->\n\nUserRepository->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/AuthOptions.html": {
      url: "interfaces/AuthOptions.html",
      title: "interface - AuthOptions",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthOptions\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The AuthOptions define how authentication and authorization is managed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            jwtSecretKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pepper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            superadminCredentials\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            verificationTokenDuration\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwtSecretKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwtSecretKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Sets the secret key for decoding and validating a JWT access token\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pepper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pepper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Extra security layer for hashing passwords\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        superadminCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        superadminCredentials:         SuperadminCredentials\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SuperadminCredentials\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Configures the credentials to be used to create a superadmin\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verificationTokenDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verificationTokenDuration:     string | number\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : '7d'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Sets the length of time that a verification token is valid for, after which the verification token must be refreshed.\nExpressed as a string describing a time span per\nzeit/ms.  Eg: 60, '2 days', '10h', '7d'\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/AuthService.html": {
      url: "injectables/AuthService.html",
      title: "injectable - AuthService",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loginWithEmailAndPassword\n                            \n                            \n                                    Public\n                                    Async\n                                signUpWithEmailAndPassword\n                            \n                            \n                                    Private\n                                signUser\n                            \n                            \n                                    Private\n                                    Async\n                                storeUserRecord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService, configService: ConfigService)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loginWithEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginWithEmailAndPassword(r: AuthDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    r\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signUpWithEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUpWithEmailAndPassword(undefined: CreateUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        signUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUser(id: string, role: RoleType)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                RoleType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        storeUserRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    storeUserRecord(email: string, hash: string, fullName: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fullName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/AuthorController.html": {
      url: "controllers/AuthorController.html",
      title: "controller - AuthorController",
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorController\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/author/author.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                index\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(file: Express.Multer.File, createAuthorDto: CreateAuthorDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: CreateAuthorDto})@ApiCreatedResponse({description: 'The record has been successfully created.'})@ApiBadRequestResponse({description: 'The record has failed validation.'})@ApiConflictResponse({description: 'The record has an internal conflict.'})@ApiForbiddenResponse({description: 'Forbidden!'})@UseRoles(Role.PUBLISHER, Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@UseInterceptors(undefined)@Post()\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAuthorDto\n                                    \n                                                CreateAuthorDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', description: 'Author unique id'})@Get(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@Get()\n                \n            \n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', description: 'Author unique id'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateAuthorDto: UpdateAuthorDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', description: 'Author unique id'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Patch(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAuthorDto\n                                    \n                                                UpdateAuthorDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/AuthorEntity.html": {
      url: "classes/AuthorEntity.html",
      title: "class - AuthorEntity",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorEntity\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/author/models/author.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseEntitySchema\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                biography\n                            \n                            \n                                    Public\n                                books\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Readonly\n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false, type: String, default: undefined, trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        biography\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false, default: \'\', trim: true, maxlength: 2048})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        books\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, trim: true, minlength: 3, maxlength: 54})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/AuthorModule.html": {
      url: "modules/AuthorModule.html",
      title: "module - AuthorModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AuthorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthorModule\n\n\n\ncluster_AuthorModule_providers\n\n\n\n\nAuthorRepository\n\nAuthorRepository\n\n\n\nAuthorModule\n\nAuthorModule\n\nAuthorModule -->\n\nAuthorRepository->AuthorModule\n\n\n\n\n\nAuthorService\n\nAuthorService\n\nAuthorModule -->\n\nAuthorService->AuthorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/author/author.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorRepository\n                        \n                        \n                            AuthorService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthorController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/AuthorRepository.html": {
      url: "injectables/AuthorRepository.html",
      title: "injectable - AuthorRepository",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthorRepository\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/author/models/author.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseProjection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authorModel: Model)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authorModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(entityId: string, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(entityId: string, updateEntityData: UpdateQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseProjection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { __v: 0 }\n                    \n                \n\n\n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/AuthorService.html": {
      url: "injectables/AuthorService.html",
      title: "injectable - AuthorService",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthorService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/author/author.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                processAvatarUpload\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authorRepository: AuthorRepository)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authorRepository\n                                                  \n                                                        \n                                                                        AuthorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(file: Express.Multer.File, a: CreateAuthorDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    a\n                                    \n                                                CreateAuthorDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        processAvatarUpload\n                        \n                    \n                \n            \n            \n                \n                    \n                    processAvatarUpload(file: Express.Multer.File, authorName: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    authorName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateAuthorDto: UpdateAuthorDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAuthorDto\n                                    \n                                                UpdateAuthorDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BaseEntitySchema.html": {
      url: "classes/BaseEntitySchema.html",
      title: "class - BaseEntitySchema",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntitySchema\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/base.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/BookController.html": {
      url: "controllers/BookController.html",
      title: "controller - BookController",
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  BookController\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                index\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(files: UploadBookDto, createBookDto: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: CreateBookDto})@ApiCreatedResponse({description: 'The record has been successfully created.'})@ApiBadRequestResponse({description: 'The record has failed validation.'})@ApiConflictResponse({description: 'The record has an internal conflict.'})@ApiForbiddenResponse({description: 'Forbidden!'})@UseRoles(Role.PUBLISHER, Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@UseInterceptors(undefined)@Post('create')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                                UploadBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createBookDto\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', type: 'String', description: 'Book id'})@Get(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@Get()\n                \n            \n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', type: 'String', description: 'Book id'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateBookDto: UpdateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', type: 'String', description: 'Book id'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Patch(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBookDto\n                                    \n                                                UpdateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/BookEntity.html": {
      url: "classes/BookEntity.html",
      title: "class - BookEntity",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookEntity\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/models/book.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseEntitySchema\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                categories\n                            \n                            \n                                description\n                            \n                            \n                                isbn\n                            \n                            \n                                name\n                            \n                            \n                                publishedDate\n                            \n                            \n                                publisher\n                            \n                            \n                                releaseDate\n                            \n                            \n                                reviews\n                            \n                            \n                                srcCoverPath\n                            \n                            \n                                srcPath\n                            \n                            \n                                totalReviews\n                            \n                            \n                                    Readonly\n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: undefined, ref: 'authors'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, trim: true, minlength: 54, maxlength: 4096})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isbn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 13})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, trim: true, minlength: 5, maxlength: 256})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publishedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publisher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: undefined, ref: 'users'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        releaseDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        srcCoverPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        srcPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalReviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, default: 0, min: 0})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/BookModule.html": {
      url: "modules/BookModule.html",
      title: "module - BookModule",
      body: '\n                   \n\n\n\n\n    Modules\n    BookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BookModule\n\n\n\ncluster_BookModule_providers\n\n\n\n\nBookRepository\n\nBookRepository\n\n\n\nBookModule\n\nBookModule\n\nBookModule -->\n\nBookRepository->BookModule\n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/book/book.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookRepository\n                        \n                        \n                            BookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/BookRepository.html": {
      url: "injectables/BookRepository.html",
      title: "injectable - BookRepository",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BookRepository\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/models/book.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseProjection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookModel: Model)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(entityId: string, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(entityId: string, updateEntityData: UpdateQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseProjection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { __v: 0 }\n                    \n                \n\n\n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/BookService.html": {
      url: "injectables/BookService.html",
      title: "injectable - BookService",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BookService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                processUploadedFiles\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookRepository: BookRepository)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookRepository\n                                                  \n                                                        \n                                                                        BookRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(files: UploadBookDto, b: CreateBookDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                                UploadBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        processUploadedFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    processUploadedFiles(f: UploadBookDto, bookName: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    f\n                                    \n                                                UploadBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateBookDto: UpdateBookDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBookDto\n                                    \n                                                UpdateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/CategoryController.html": {
      url: "controllers/CategoryController.html",
      title: "controller - CategoryController",
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                index\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: CreateCategoryDto})@ApiCreatedResponse({description: 'The record has been successfully created.'})@ApiBadRequestResponse({description: 'The record has failed validation.'})@ApiConflictResponse({description: 'The record has an internal conflict.'})@ApiForbiddenResponse({description: 'Forbidden!'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Post()\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', description: 'Category id'})@Get(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@Get()\n                \n            \n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', description: 'Category id'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', description: 'Category id'})@UseRoles(Role.ADMIN, Role.SUPER_ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Patch(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/CategoryEntity.html": {
      url: "classes/CategoryEntity.html",
      title: "class - CategoryEntity",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryEntity\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/models/category.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseEntitySchema\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                parent\n                            \n                            \n                                    Readonly\n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, trim: true, minlength: 20, maxlength: 2048})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, trim: true, minlength: 3, maxlength: 256})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEntity | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false, type: undefined, ref: \'categories\', default: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/CategoryModule.html": {
      url: "modules/CategoryModule.html",
      title: "module - CategoryModule",
      body: '\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryRepository\n\nCategoryRepository\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryRepository->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryRepository\n                        \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/CategoryRepository.html": {
      url: "injectables/CategoryRepository.html",
      title: "injectable - CategoryRepository",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryRepository\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/models/category.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseProjection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryModel: Model)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(entityId: string, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(entityId: string, updateEntityData: UpdateQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseProjection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { __v: 0 }\n                    \n                \n\n\n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/CategoryService.html": {
      url: "injectables/CategoryService.html",
      title: "injectable - CategoryService",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: CategoryRepository)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        CategoryRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(c: CreateCategoryDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    c\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/ConfigModule.html": {
      url: "modules/ConfigModule.html",
      title: "module - ConfigModule",
      body: '\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/ConfigService.html": {
      url: "classes/ConfigService.html",
      title: "class - ConfigService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setDefaultConfig\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDevelopment\n                                \n                                \n                                    isProduction\n                                \n                                \n                                    isTest\n                                \n                                \n                                    apiOptions\n                                \n                                \n                                    authOptions\n                                \n                                \n                                    dbOptions\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RuntimeSetismConfig\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setDefaultConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultConfig()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         RuntimeSetismConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDevelopment\n                    \n                \n\n                \n                    \n                        getisDevelopment()\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isProduction\n                    \n                \n\n                \n                    \n                        getisProduction()\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isTest\n                    \n                \n\n                \n                    \n                        getisTest()\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        apiOptions\n                    \n                \n\n                \n                    \n                        getapiOptions()\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        authOptions\n                    \n                \n\n                \n                    \n                        getauthOptions()\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        dbOptions\n                    \n                \n\n                \n                    \n                        getdbOptions()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/ConnectionOptions.html": {
      url: "interfaces/ConnectionOptions.html",
      title: "interface - ConnectionOptions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConnectionOptions\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            connectionUri\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testConnectionUri\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        connectionUri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connectionUri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Database connection string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testConnectionUri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testConnectionUri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Database connection string for testing env\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/CreateAuthorDto.html": {
      url: "classes/CreateAuthorDto.html",
      title: "class - CreateAuthorDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthorDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/author/dto/create-author.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                biography\n                            \n                            \n                                books\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Author avatar', required: false})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        biography\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Author biography', required: false})@IsOptional()@MinLength(12, {message: 'Biography must be at least 12 characters!'})@MaxLength(2048, {message: 'Biography must be at most 2048 characters!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        books\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A list of all author's book IDs', default: undefined})@IsString({each: true, message: 'Book entry must be of type string!'})@IsDefined({message: 'Author books must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Author name', default: 'Paulette Jiles'})@IsString({message: 'Author must be of type string!'})@IsDefined({message: 'Author must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/CreateBookDto.html": {
      url: "classes/CreateBookDto.html",
      title: "class - CreateBookDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/dto/create-book.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                categories\n                            \n                            \n                                description\n                            \n                            \n                                isbn\n                            \n                            \n                                name\n                            \n                            \n                                publisher\n                            \n                            \n                                releaseDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The author of the book', default: ''})@IsString({message: 'Author must be of type string!'})@IsDefined({message: 'Author must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A list of book category ID references', default: undefined})@IsString({each: true, message: 'Category must be of type string!'})@IsDefined({message: 'Categories must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Book description', default: BOOK_DESCRIPTION})@IsString({message: 'Description must be of type string!'})@MinLength(54, {message: 'Description must have at least 54 characters!'})@MaxLength(4096, {message: 'Description must be at most 4096 characters!'})@IsDefined({message: 'Description must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isbn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Book ISBN number', default: 9780062574350})@IsISBN(13, {message: 'ISBN version must be '13''})@IsDefined({message: 'ISBN must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Book name', default: BOOK_NAME})@IsString({message: 'Name must be of type string!'})@MinLength(5, {message: 'Name must have at least 5 characters!'})@MaxLength(256, {message: 'Name must be at most 256 characters!'})@IsDefined({message: 'Name must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publisher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The publisher of the book', default: ''})@IsString({message: 'Author must be of type string!'})@IsDefined({message: 'Author must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        releaseDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date of the book release', default: 1519211809934})@IsNumberString({}, {message: 'Release Date must be a positive number!'})@IsDefined({message: 'Release Date must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/CreateCategoryDto.html": {
      url: "classes/CreateCategoryDto.html",
      title: "class - CreateCategoryDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                parent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category description', default: 'Layered novels with literary merit.'})@IsString({message: 'Description must be of type string!'})@MinLength(20, {message: 'Description must have at least 54 characters!'})@MaxLength(2048, {message: 'Description must be at most 4096 characters!'})@IsDefined({message: 'Description must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category name', default: 'Literary Fiction'})@IsString({message: 'Name must be of type string!'})@MinLength(3, {message: 'Name must have at least 3 characters!'})@MaxLength(256, {message: 'Name must be at most 256 characters!'})@IsDefined({message: 'Name must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEntity | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Parent category which belongs to', default: undefined})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/CreateReadingListDto.html": {
      url: "classes/CreateReadingListDto.html",
      title: "class - CreateReadingListDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReadingListDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/readingList-create.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                books\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                kind\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        books\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsDefined()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(20, {message: 'Name must have at least 20 characters'})@MaxLength(1024, {message: 'Name must have at most 1024 characters'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kind\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReadingListType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ReadingListKind)@IsDefined()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsDefined()@MinLength(3, {message: 'Name must have at least 3 characters'})@MaxLength(54, {message: 'Name must have at most 54 characters'})\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/CreateUserDto.html": {
      url: "classes/CreateUserDto.html",
      title: "class - CreateUserDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'String', description: 'Email address', default: 'test@email.com'})@IsEmail({}, {message: 'Email address must be a valid email!'})@IsDefined({message: 'Email address must not be empty!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'String', description: 'User full name', default: 'Api Fullname'})@IsDefined({message: 'Name must not be empty!'})@MinLength(4, {message: 'Name must be at least 4 characters!'})@MaxLength(26, {message: 'Name must be at most 26 characters!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'String', description: 'User password', default: 'password123'})@IsDefined({message: 'Password must not be empty!'})@MinLength(6, {message: 'Passowrd must have at least 6 characters!'})@MaxLength(32, {message: 'Password must be at most 32 characters!'})\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/DatabaseModule.html": {
      url: "modules/DatabaseModule.html",
      title: "module - DatabaseModule",
      body: '\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/DatabaseService.html": {
      url: "injectables/DatabaseService.html",
      title: "injectable - DatabaseService",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/db.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDbHandle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDbHandle\n                        \n                    \n                \n            \n            \n                \ngetDbHandle()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Connection\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/EntityRepository.html": {
      url: "classes/EntityRepository.html",
      title: "class - EntityRepository",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityRepository\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/entity.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseProjection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityModal: Model)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityModal\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseProjection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { __v: 0 }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(entityId: string, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(entityId: string, updateEntityData: UpdateQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/IProcessFile.html": {
      url: "interfaces/IProcessFile.html",
      title: "interface - IProcessFile",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IProcessFile\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/process-file.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customExt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            customName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fileBuffer\n                                        \n                                \n                                \n                                        \n                                            fileType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subDir\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customExt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customExt:         ProcessFileExtType\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : "jpeg"\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         ProcessFileExtType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom extension for the file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customName:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : UUID string\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom file name to be saved\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileBuffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileBuffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The buffer data of the file to be processed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileType:         ProcessFileType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ProcessFileType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the file to be processed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subDir\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subDir:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Sub directory name to be placed under\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/IResizeImageArgs.html": {
      url: "interfaces/IResizeImageArgs.html",
      title: "interface - IResizeImageArgs",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResizeImageArgs\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/process-file.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customOptions\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customOptions:     sharp.ResizeOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     sharp.ResizeOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/JwtAuthGuard.html": {
      url: "injectables/JwtAuthGuard.html",
      title: "injectable - JwtAuthGuard",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/JwtStrategy.html": {
      url: "injectables/JwtStrategy.html",
      title: "injectable - JwtStrategy",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/ProcessFile.html": {
      url: "classes/ProcessFile.html",
      title: "class - ProcessFile",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessFile\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/process-file.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                buffer\n                            \n                            \n                                    Private\n                                    Readonly\n                                ext\n                            \n                            \n                                    Private\n                                    Readonly\n                                fileName\n                            \n                            \n                                    Private\n                                    Readonly\n                                subDir\n                            \n                            \n                                    Private\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getOutputDir\n                            \n                            \n                                    Public\n                                    Async\n                                resizeAndSave\n                            \n                            \n                                    Public\n                                    Async\n                                saveFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(args: IProcessFile)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                        IProcessFile\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        buffer\n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ext\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProcessFileExtType\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        subDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProcessFileType\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getOutputDir\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOutputDir(useStaticPath)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    useStaticPath\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The path to the output dir\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resizeAndSave\n                        \n                    \n                \n            \n            \n                \n                    \n                    resizeAndSave(undefined: IResizeImageArgs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    [object Object]\n                                    \n                                                IResizeImageArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nImage width to be resized to\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Relative path to the processed saved file\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        saveFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveFile()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Relative path to the saved file\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "guards/RolesGuard.html": {
      url: "guards/RolesGuard.html",
      title: "guard - RolesGuard",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            API Info\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/RuntimeSetismConfig.html": {
      url: "interfaces/RuntimeSetismConfig.html",
      title: "interface - RuntimeSetismConfig",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RuntimeSetismConfig\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                All possible configuration options are defined by the\nSetismConfig interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiOptions\n                                        \n                                \n                                \n                                        \n                                            authOptions\n                                        \n                                \n                                \n                                        \n                                            dbOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiOptions:         Required\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Required\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the REST APIs, including hostname, port, CORS settings,\nmiddleware etc.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        authOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authOptions:         Required\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Required\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for authorization.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dbOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dbOptions:         Required\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Required\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The connection options used to connect to the database.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/SuperadminCredentials.html": {
      url: "interfaces/SuperadminCredentials.html",
      title: "interface - SuperadminCredentials",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SuperadminCredentials\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : \'superadmin\'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The password to be used to create a superadmin account\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/SwaggerOptions.html": {
      url: "interfaces/SwaggerOptions.html",
      title: "interface - SwaggerOptions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerOptions\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Documentation page API description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Documentation page title\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Documentation API current version\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/UpdateAuthorDto.html": {
      url: "classes/UpdateAuthorDto.html",
      title: "class - UpdateAuthorDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthorDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/author/dto/update-author.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/UpdateBookDto.html": {
      url: "classes/UpdateBookDto.html",
      title: "class - UpdateBookDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/dto/update-book.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                publishedDate\n                            \n                            \n                                    Optional\n                                reviews\n                            \n                            \n                                    Optional\n                                srcCoverPath\n                            \n                            \n                                    Optional\n                                srcPath\n                            \n                            \n                                    Optional\n                                totalReviews\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        publishedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Book file source path', required: false})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A list of book review ID references', required: false})@IsString({each: true, message: 'Review Must be of type string!'})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        srcCoverPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Book cover image source path', required: false})@IsString({message: 'Path must be of type string!'})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        srcPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Book file source path', required: false})@IsString({message: 'Path must be of type string!'})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        totalReviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of book reviews', required: false})@IsPositive({message: 'Total reviews must be a positive number!'})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/UpdateCategoryDto.html": {
      url: "classes/UpdateCategoryDto.html",
      title: "class - UpdateCategoryDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/UpdateUserDto.html": {
      url: "classes/UpdateUserDto.html",
      title: "class - UpdateUserDto",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                biography\n                            \n                            \n                                    Optional\n                                birthday\n                            \n                            \n                                    Optional\n                                newWish\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', description: 'User avatar', required: false})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        biography\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', description: 'User biography', required: false})@IsOptional()@MinLength(20, {message: 'Biography must be at least 20 characters!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'date', description: 'User birthday', required: false})@IsOptional()@IsDate({message: 'Birthday must be a valid date!'})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        newWish\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', description: 'New book to be added to wishlist', required: false})@IsOptional()\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', description: 'Username', required: false})@IsOptional()@MinLength(4, {message: 'Username must be at least 4 characters!'})@MaxLength(14, {message: 'Username must be at least 12 characters!'})\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/UploadBookDto.html": {
      url: "classes/UploadBookDto.html",
      title: "class - UploadBookDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadBookDto\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/dto/upload-book.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cover\n                            \n                            \n                                    Optional\n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File[]\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File[]\n\n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/UserController.html": {
      url: "controllers/UserController.html",
      title: "controller - UserController",
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createList\n                            \n                            \n                                find\n                            \n                            \n                                index\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createList\n                        \n                    \n                \n            \n            \n                \ncreateList(id: string, createReadingListDto: CreateReadingListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: CreateReadingListDto})@ApiCreatedResponse({description: 'The record has been successfully created.'})@ApiBadRequestResponse({description: 'The record has failed validation.'})@ApiConflictResponse({description: 'The record has an internal conflict.'})@ApiForbiddenResponse({description: 'Forbidden!'})@Post(':id/list')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createReadingListDto\n                                    \n                                                CreateReadingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', type: 'String', description: 'User id'})@Get(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@UseRoles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Get()\n                \n            \n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', type: 'String', description: 'User id'})@Delete(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The record has been successfully returned.'})@ApiNotFoundResponse({description: 'The record was not found.'})@ApiForbiddenResponse({description: 'Forbidden!'})@ApiParam({name: 'id', type: 'String', description: 'User id'})@Patch(':id')\n                \n            \n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "classes/UserEntity.html": {
      url: "classes/UserEntity.html",
      title: "class - UserEntity",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/models/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseEntitySchema\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                avatar\n                            \n                            \n                                    Public\n                                biography\n                            \n                            \n                                    Public\n                                birthday\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                firstLogin\n                            \n                            \n                                    Public\n                                fullName\n                            \n                            \n                                    Public\n                                internalComment\n                            \n                            \n                                    Public\n                                lastLogin\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                readingList\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                username\n                            \n                            \n                                    Public\n                                wishList\n                            \n                            \n                                    Readonly\n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: '', trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        biography\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: '', trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        firstLogin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({require: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        internalComment\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, default: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastLogin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, trim: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        readingList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateReadingListDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['CreateReadingListDto'])\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, enum: undefined, default: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, trim: true, default: undefined, minlength: 3, maxlength: 12, lowercase: true})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        wishList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/UserModule.html": {
      url: "modules/UserModule.html",
      title: "module - UserModule",
      body: '\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserRepository\n\nUserRepository\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/UserRepository.html": {
      url: "injectables/UserRepository.html",
      title: "injectable - UserRepository",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/models/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseProjection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(entityFilterQuery: FilterQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(entityId: string, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(entityId: string, updateEntityData: UpdateQuery)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseProjection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { __v: 0 }\n                    \n                \n\n\n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/UserService.html": {
      url: "injectables/UserService.html",
      title: "injectable - UserService",
      body: '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            API Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createList\n                            \n                            \n                                    Public\n                                    Async\n                                index\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                show\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                    \n                    createList(id: string, createReadingListDto: CreateReadingListDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createReadingListDto\n                                    \n                                                CreateReadingListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        index\n                        \n                    \n                \n            \n            \n                \n                    \n                    index()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        show\n                        \n                    \n                \n            \n            \n                \n                    \n                    show(id: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "contributing.html": {
      url: "contributing.html",
      title: "getting-started - contributing",
      body: "\n                   \n\nContributing\nContributions are what make the open source community such an amazing place to learn, inspire, and create. We heartily welcome any and all contributions that match our code style standards!\nThat being said, this codebase isn't your typical open source project because it's not a library or package with a limited scope — it's an entire product.\nGround Rules\nContributions and discussion guidelines\n\nAll discussions agree to GitHub's Community Guidelines and Acceptable Use Policies. We expect discussions in issues and pull requests to stay positive, productive, and respectful.\n\nReporting a bug or discussing a feature idea\n\nIf you found a technical bug or have ideas for features we should implement, open a new issue. Make sure to follow the issue template and you should be golden! (click here to open a new issue)\n\nFixing a bug or implementing a new feature\n\nIf you find a bug and open a PR that fixes it we'll review it as soon as possible to ensure it matches our code style standards.\nIf you want to implement a new feature, open an issue first to discuss what it'd look like and to ensure it fits in our roadmap and plans for the app (see the roadmap for planned and currently ongoing work).\n\nPrerequisites\nWe require you to use volta to manage your npm and node environment versions\n\nvolta\nGetting Started\n\n\nyarn\nInstallation\n\n\n\nGetting Started\nInstallation\n\nFork the project\nClone the repo\nInstall NPM packagesyarn install\nRun development serveryarn start:dev\n\nBranching\n\nCreate your Feature Branch (git checkout -b feature/#_amazing-feature)\nCommit your Changes (git commit -m \"feat: add some amazing feature\")\nPush to the Branch (git push -u origin feature/#_amazing-feature)\nOpen a Pull Request\n\nPull Requests\nWe require all new PRs to follow these guidelines. Any PR should use git keywords\n [Short summury of the PR, under 50 characters]\n [Detailed description of the PR, it can be used the initial issue description]\n\nFixes #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "coverage.html": {
      url: "coverage.html",
      title: "coverage - coverage",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/role.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/role.decorator.ts\n            \n            variable\n            UseRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/role.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/author/author.controller.ts\n            \n            controller\n            AuthorController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/author/author.controller.ts\n            \n            variable\n            CONTROLLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/author/author.service.ts\n            \n            injectable\n            AuthorService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/author/dto/create-author.dto.ts\n            \n            class\n            CreateAuthorDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/author/dto/update-author.dto.ts\n            \n            class\n            UpdateAuthorDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/author/models/author.entity.ts\n            \n            class\n            AuthorEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/author/models/author.entity.ts\n            \n            variable\n            AuthorEntitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/author/models/author.repository.ts\n            \n            injectable\n            AuthorRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/book/book.controller.ts\n            \n            controller\n            BookController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/book/book.service.ts\n            \n            injectable\n            BookService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/book/dto/create-book.dto.ts\n            \n            class\n            CreateBookDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/book/dto/create-book.dto.ts\n            \n            variable\n            BOOK_DESCRIPTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/book/dto/create-book.dto.ts\n            \n            variable\n            BOOK_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/book/dto/update-book.dto.ts\n            \n            class\n            UpdateBookDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/book/dto/upload-book.dto.ts\n            \n            class\n            UploadBookDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/book/models/book.entity.ts\n            \n            class\n            BookEntity\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/book/models/book.entity.ts\n            \n            variable\n            BookEntitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/book/models/book.repository.ts\n            \n            injectable\n            BookRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            variable\n            CONTROLLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/models/category.entity.ts\n            \n            class\n            CategoryEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/category/models/category.entity.ts\n            \n            variable\n            CategoryEntitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/models/category.repository.ts\n            \n            injectable\n            CategoryRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            ApiOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            AuthOptions\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            ConnectionOptions\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            RuntimeSetismConfig\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            SuperadminCredentials\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/db/base.schema.ts\n            \n            class\n            BaseEntitySchema\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/db/db.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/db/entity.repository.ts\n            \n            class\n            EntityRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            LOG_LABEL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/swagger.ts\n            \n            function\n            createdocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/readingList-create.dto.ts\n            \n            class\n            CreateReadingListDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/models/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/user/models/user.entity.ts\n            \n            variable\n            UserEntitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/models/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/file-system.ts\n            \n            function\n            doesPathExist\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/file-system.ts\n            \n            function\n            makeDir\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/file-system.ts\n            \n            function\n            readFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/file-system.ts\n            \n            function\n            writeFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/formatters.ts\n            \n            function\n            formatStringForPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/process-file.ts\n            \n            class\n            ProcessFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/utils/process-file.ts\n            \n            interface\n            IProcessFile\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/utils/process-file.ts\n            \n            interface\n            IResizeImageArgs\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/process-file.ts\n            \n            variable\n            LOG_LABEL\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "dependencies.html": {
      url: "dependencies.html",
      title: "package-dependencies - dependencies",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mongoose : ^8.0.1\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.0.9\n        \n            argon2 : ^0.28.2\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            csurf : ^1.11.0\n        \n            envalid : ^6.0.2\n        \n            helmet : ^4.6.0\n        \n            mongoose : ^5.13.8\n        \n            multer : ^1.4.3\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sharp : ^0.29.1\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/enumerations.html": {
      url: "miscellaneous/enumerations.html",
      title: "miscellaneous-enumerations - enumerations",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Environment   (src/.../config.interface.ts)\n                        \n                        \n                            ReadingListKind   (src/.../reading-list.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/config.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/user/reading-list.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReadingListKind\n                    \n                \n                        \n                            \n                                 PUBLIC\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n            \n        \n\n    src/auth/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 READER\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 PUBLISHER\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 CRITIC\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 AUTHOR\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/functions.html": {
      url: "miscellaneous/functions.html",
      title: "miscellaneous-functions - functions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createdocument   (src/.../swagger.ts)\n                        \n                        \n                            doesPathExist   (src/.../file-system.ts)\n                        \n                        \n                            formatStringForPath   (src/.../formatters.ts)\n                        \n                        \n                            makeDir   (src/.../file-system.ts)\n                        \n                        \n                            readFile   (src/.../file-system.ts)\n                        \n                        \n                            writeFile   (src/.../file-system.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createdocument\n                        \n                    \n                \n            \n            \n                \ncreatedocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/file-system.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        doesPathExist\n                        \n                    \n                \n            \n            \n                \ndoesPathExist(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe absolute path to be verified\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true or false\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeDir\n                        \n                    \n                \n            \n            \n                \nmakeDir(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe absolute path to where the directory will be created\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        readFile\n                        \n                    \n                \n            \n            \n                \nreadFile(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe absolute path to the file\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A buffer of the file or undefined if no file found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeFile\n                        \n                    \n                \n            \n            \n                \nwriteFile(path: string, data: Buffer)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe absolute path to the file\n\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA buffer containing your file data\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A buffer of the file or undefined if no file found\n\n                    \n                \n            \n        \n    \n    src/utils/formatters.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatStringForPath\n                        \n                    \n                \n            \n            \n                \nformatStringForPath(rawName: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rawName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Book name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            My Book -&gt; my-book\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Formated book name\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "index.html": {
      url: "index.html",
      title: "getting-started - index",
      body: '\n                   \n\n\n  \n  \n    \n  \n  \n  Read anytime, anywhere.\n  \n\n\n\n  \n    \n  \n\n\n\n  About •\n  Roadmap •\n  Contributing •\n  Feedback •\n  Contributors •\n  License •\n  Acknowledgements\n\n\n\n\n\nQuick Links\n\nLive at: dekoo.tk\nBackend Docs: docs.dekoo.tk\nAPI Docs: svr.dekoo.tk\n\n\n\nAbout The Project\nWe all seen services that provides virtual books at outrageous subscription prices and at Dekoo we think that is a stopping point for a lot of people. This fact inspired us to build a service that will provide access to free reading titles along with accessible prices for anyone and everyone.\nHere\'s why:\n\n33% of people surveyed feel happier after reading.\n55% of people surveyed feel more relaxed after reading\n70% of people surveyed believe that reading has a positive impact on their careers.\nReading stimulates the part of the brain that deals with depression. Self-help books, can help ward off depressive occurrences.\nBeing well-spoken and articulate can help increase job performance and self-esteem.\n\nKey Features\n\nRead books right in your browser\nInstantly have access to a book and it\'s content from your borwser window\n\n\nSaving books for later\nCreating reading lists\nPublic and private reading lists that you can share on your profile\n\n\nDownload a book in PDF format\nRead what other people think about a book\nReviews are important in picking the right book for you, our review system allows other readers and critics to leave their opinion on the book.\n\n\nDark/Light mode\nProfile page\nSearch and fiter your favorite books\n\nBuilt With\nThe entire codebase consists in TypeScript, here is a list of technologies used:\n\nNestJs: Back-end framework\nMongoDB: Data storage\nSwagger: API Docs\nPassportJs: Authentication Middleware\n\nFolder structure\ndekoo/\n├── assets       # Vendor files\n├── docs         # Compodoc Code documentation\n├── src          # Source files\n└── tests        # E2E testsCode Style\n\nWe run Prettier on-commit, which means you can write code in whatever style you want and it will be automatically formatted according to the common style when you run git commit. We also have ESLint set up, along with Jest tests.\nWe use commitlint with config-conventional, which means all commit messages should follow conventional rules.\n\n\n\nRoadmap\nSee the open issues for a list of proposed features (and known issues).\n\n\nContributing\nAny contributions you make are greatly appreciated. There are many ways in which you can participate in this project, for example:\n\nSubmit bugs and feature requests, and help us verify as they are checked in\nReview source code changes\n\nIf you are interested in fixing issues and contributing directly to the code base,\nplease see the document How to Contribute, which covers the following:\nFeedback\n\nRequest a new feature\nUpvote feature requests\nFile an issue\n\nContributors\nThis project follows the all-contributors specification. See more details about the contributors\n\n\n\n\n  \n    Andrei Chirila💻\n  \n\n\n\n\n\n\n\n\n\nLicense\nLicensed under the MIT license. See MIT for more information.\n\n\nAcknowledgements\n\nImg Shields\nHeroku\nGithub Pages\nCompodoc\nHusky\nMongoose\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "license.html": {
      url: "license.html",
      title: "getting-started - license",
      body: '\n                   \n\nMIT License\nCopyright (c) 2021 Dekoo\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules.html": {
      url: "modules.html",
      title: "modules - modules",
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "overview.html": {
      url: "overview.html",
      title: "overview - overview",
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthorModule\n\n\n\ncluster_AuthorModule_providers\n\n\n\ncluster_BookModule\n\n\n\ncluster_BookModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthorModule\n\nAuthorModule\n\nAppModule -->\n\nAuthorModule->AppModule\n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nAuthModule -->\n\nUserRepository->AuthModule\n\n\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nAuthorRepository\n\nAuthorRepository\n\nAuthorModule -->\n\nAuthorRepository->AuthorModule\n\n\n\n\n\nAuthorService\n\nAuthorService\n\nAuthorModule -->\n\nAuthorService->AuthorModule\n\n\n\n\n\nBookRepository\n\nBookRepository\n\nBookModule -->\n\nBookRepository->BookModule\n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\nCategoryRepository\n\nCategoryRepository\n\nCategoryModule -->\n\nCategoryRepository->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/typealiases.html": {
      url: "miscellaneous/typealiases.html",
      title: "miscellaneous-typealiases - typealiases",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthorDocument   (src/.../author.entity.ts)\n                        \n                        \n                            BookDocument   (src/.../book.entity.ts)\n                        \n                        \n                            CategoryDocument   (src/.../category.entity.ts)\n                        \n                        \n                            ProcessFileExtType   (src/.../process-file.ts)\n                        \n                        \n                            ProcessFileType   (src/.../process-file.ts)\n                        \n                        \n                            ReadingListType   (src/.../reading-list.enum.ts)\n                        \n                        \n                            RoleType   (src/.../role.enum.ts)\n                        \n                        \n                            SharpExtType   (src/.../process-file.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/author/models/author.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AuthorDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/book/models/book.entity.ts\n    \n    \n        \n            \n                \n                    \n                    BookDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/category/models/category.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CategoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/utils/process-file.ts\n    \n    \n        \n            \n                \n                    \n                    ProcessFileExtType\n                \n            \n            \n                \n                            SharpExtType | "pdf"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ProcessFileType\n                \n            \n            \n                \n                        "cover" | "avatar" | "file"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SharpExtType\n                \n            \n            \n                \n                        "jpeg" | "png" | "webp"\n\n                \n            \n        \n    \n    src/user/reading-list.enum.ts\n    \n    \n        \n            \n                \n                    \n                    ReadingListType\n                \n            \n            \n                \n                             `${ReadingListKind}`\n\n                \n            \n        \n    \n    src/auth/role.enum.ts\n    \n    \n        \n            \n                \n                    \n                    RoleType\n                \n            \n            \n                \n                             `${Role}`\n\n                \n            \n        \n    \n    src/user/models/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/variables.html": {
      url: "miscellaneous/variables.html",
      title: "miscellaneous-variables - variables",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthorEntitySchema   (src/.../author.entity.ts)\n                        \n                        \n                            BOOK_DESCRIPTION   (src/.../create-book.dto.ts)\n                        \n                        \n                            BOOK_NAME   (src/.../create-book.dto.ts)\n                        \n                        \n                            BookEntitySchema   (src/.../book.entity.ts)\n                        \n                        \n                            CategoryEntitySchema   (src/.../category.entity.ts)\n                        \n                        \n                            CONTROLLER_NAME   (src/.../author.controller.ts)\n                        \n                        \n                            CONTROLLER_NAME   (src/.../category.controller.ts)\n                        \n                        \n                            LOG_LABEL   (src/.../main.ts)\n                        \n                        \n                            LOG_LABEL   (src/.../process-file.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                            UserEntitySchema   (src/.../user.entity.ts)\n                        \n                        \n                            UseRoles   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/author/models/author.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthorEntitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(AuthorEntity)\n                    \n                \n\n\n        \n    \n\n    src/book/dto/create-book.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOOK_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \'The measure of the executive, Drucker reminds us, is the ability to "get the right things done." This usually involves doing what other people have overlooked as well as avoiding what is unproductive. Intelligence, imagination, and knowledge may all be wasted in an executive job without the acquired habits of mind that mold them into results.\'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BOOK_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "The Effective Executive"\n                    \n                \n\n\n        \n    \n\n    src/book/models/book.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BookEntitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BookEntity)\n                    \n                \n\n\n        \n    \n\n    src/category/models/category.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategoryEntitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(CategoryEntity)\n                    \n                \n\n\n        \n    \n\n    src/author/author.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONTROLLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "authors"\n                    \n                \n\n\n        \n    \n\n    src/category/category.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONTROLLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "categories"\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOG_LABEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "BOOTSTRAP"\n                    \n                \n\n\n        \n    \n\n    src/utils/process-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOG_LABEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "PROCESS_FILE"\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "claim"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UseRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n\n    src/user/models/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserEntitySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserEntity)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
